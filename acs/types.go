// This file was auto-generated by Fern from our API Definition.

package acs

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/seamapi/go/core"
	time "time"
)

type CredentialPoolsListResponseAcsCredentialPoolsItem struct {
	AcsCredentialPoolId     string    `json:"acs_credential_pool_id"`
	AcsSystemId             string    `json:"acs_system_id"`
	DisplayName             string    `json:"display_name"`
	ExternalTypeDisplayName string    `json:"external_type_display_name"`
	CreatedAt               time.Time `json:"created_at"`
	WorkspaceId             string    `json:"workspace_id"`
	externalType            string

	_rawJSON json.RawMessage
}

func (c *CredentialPoolsListResponseAcsCredentialPoolsItem) ExternalType() string {
	return c.externalType
}

func (c *CredentialPoolsListResponseAcsCredentialPoolsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler CredentialPoolsListResponseAcsCredentialPoolsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CredentialPoolsListResponseAcsCredentialPoolsItem(value)
	c.externalType = "hid_part_number"
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CredentialPoolsListResponseAcsCredentialPoolsItem) MarshalJSON() ([]byte, error) {
	type embed CredentialPoolsListResponseAcsCredentialPoolsItem
	var marshaler = struct {
		embed
		ExternalType string `json:"external_type"`
	}{
		embed:        embed(*c),
		ExternalType: "hid_part_number",
	}
	return json.Marshal(marshaler)
}

func (c *CredentialPoolsListResponseAcsCredentialPoolsItem) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CredentialProvisioningAutomationsLaunchResponseAcsCredentialProvisioningAutomation struct {
	AcsCredentialProvisioningAutomationId string    `json:"acs_credential_provisioning_automation_id"`
	CredentialManagerAcsSystemId          string    `json:"credential_manager_acs_system_id"`
	UserIdentityId                        string    `json:"user_identity_id"`
	CreatedAt                             time.Time `json:"created_at"`
	WorkspaceId                           string    `json:"workspace_id"`

	_rawJSON json.RawMessage
}

func (c *CredentialProvisioningAutomationsLaunchResponseAcsCredentialProvisioningAutomation) UnmarshalJSON(data []byte) error {
	type unmarshaler CredentialProvisioningAutomationsLaunchResponseAcsCredentialProvisioningAutomation
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CredentialProvisioningAutomationsLaunchResponseAcsCredentialProvisioningAutomation(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CredentialProvisioningAutomationsLaunchResponseAcsCredentialProvisioningAutomation) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CredentialsAssignResponseAcsCredential struct {
	AcsCredentialId            string                                              `json:"acs_credential_id"`
	AcsUserId                  *string                                             `json:"acs_user_id,omitempty"`
	AcsCredentialPoolId        *string                                             `json:"acs_credential_pool_id,omitempty"`
	AcsSystemId                string                                              `json:"acs_system_id"`
	DisplayName                string                                              `json:"display_name"`
	Code                       *string                                             `json:"code,omitempty"`
	AccessMethod               CredentialsAssignResponseAcsCredentialAccessMethod  `json:"access_method,omitempty"`
	ExternalType               *CredentialsAssignResponseAcsCredentialExternalType `json:"external_type,omitempty"`
	ExternalTypeDisplayName    *string                                             `json:"external_type_display_name,omitempty"`
	CreatedAt                  time.Time                                           `json:"created_at"`
	WorkspaceId                string                                              `json:"workspace_id"`
	StartsAt                   *string                                             `json:"starts_at,omitempty"`
	EndsAt                     *string                                             `json:"ends_at,omitempty"`
	IsMultiPhoneSyncCredential *bool                                               `json:"is_multi_phone_sync_credential,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CredentialsAssignResponseAcsCredential) UnmarshalJSON(data []byte) error {
	type unmarshaler CredentialsAssignResponseAcsCredential
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CredentialsAssignResponseAcsCredential(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CredentialsAssignResponseAcsCredential) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CredentialsAssignResponseAcsCredentialAccessMethod string

const (
	CredentialsAssignResponseAcsCredentialAccessMethodCode      CredentialsAssignResponseAcsCredentialAccessMethod = "code"
	CredentialsAssignResponseAcsCredentialAccessMethodCard      CredentialsAssignResponseAcsCredentialAccessMethod = "card"
	CredentialsAssignResponseAcsCredentialAccessMethodMobileKey CredentialsAssignResponseAcsCredentialAccessMethod = "mobile_key"
)

func NewCredentialsAssignResponseAcsCredentialAccessMethodFromString(s string) (CredentialsAssignResponseAcsCredentialAccessMethod, error) {
	switch s {
	case "code":
		return CredentialsAssignResponseAcsCredentialAccessMethodCode, nil
	case "card":
		return CredentialsAssignResponseAcsCredentialAccessMethodCard, nil
	case "mobile_key":
		return CredentialsAssignResponseAcsCredentialAccessMethodMobileKey, nil
	}
	var t CredentialsAssignResponseAcsCredentialAccessMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CredentialsAssignResponseAcsCredentialAccessMethod) Ptr() *CredentialsAssignResponseAcsCredentialAccessMethod {
	return &c
}

type CredentialsAssignResponseAcsCredentialExternalType string

const (
	CredentialsAssignResponseAcsCredentialExternalTypePtiCard         CredentialsAssignResponseAcsCredentialExternalType = "pti_card"
	CredentialsAssignResponseAcsCredentialExternalTypeBrivoCredential CredentialsAssignResponseAcsCredentialExternalType = "brivo_credential"
	CredentialsAssignResponseAcsCredentialExternalTypeHidCredential   CredentialsAssignResponseAcsCredentialExternalType = "hid_credential"
	CredentialsAssignResponseAcsCredentialExternalTypeVisionlineCard  CredentialsAssignResponseAcsCredentialExternalType = "visionline_card"
)

func NewCredentialsAssignResponseAcsCredentialExternalTypeFromString(s string) (CredentialsAssignResponseAcsCredentialExternalType, error) {
	switch s {
	case "pti_card":
		return CredentialsAssignResponseAcsCredentialExternalTypePtiCard, nil
	case "brivo_credential":
		return CredentialsAssignResponseAcsCredentialExternalTypeBrivoCredential, nil
	case "hid_credential":
		return CredentialsAssignResponseAcsCredentialExternalTypeHidCredential, nil
	case "visionline_card":
		return CredentialsAssignResponseAcsCredentialExternalTypeVisionlineCard, nil
	}
	var t CredentialsAssignResponseAcsCredentialExternalType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CredentialsAssignResponseAcsCredentialExternalType) Ptr() *CredentialsAssignResponseAcsCredentialExternalType {
	return &c
}

type CredentialsCreateRequestVisionlineMetadataCardFormat string

const (
	CredentialsCreateRequestVisionlineMetadataCardFormatTlCode CredentialsCreateRequestVisionlineMetadataCardFormat = "TLCode"
	CredentialsCreateRequestVisionlineMetadataCardFormatRfid48 CredentialsCreateRequestVisionlineMetadataCardFormat = "rfid48"
)

func NewCredentialsCreateRequestVisionlineMetadataCardFormatFromString(s string) (CredentialsCreateRequestVisionlineMetadataCardFormat, error) {
	switch s {
	case "TLCode":
		return CredentialsCreateRequestVisionlineMetadataCardFormatTlCode, nil
	case "rfid48":
		return CredentialsCreateRequestVisionlineMetadataCardFormatRfid48, nil
	}
	var t CredentialsCreateRequestVisionlineMetadataCardFormat
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CredentialsCreateRequestVisionlineMetadataCardFormat) Ptr() *CredentialsCreateRequestVisionlineMetadataCardFormat {
	return &c
}

type CredentialsCreateResponseAcsCredential struct {
	AcsCredentialId            string                                              `json:"acs_credential_id"`
	AcsUserId                  *string                                             `json:"acs_user_id,omitempty"`
	AcsCredentialPoolId        *string                                             `json:"acs_credential_pool_id,omitempty"`
	AcsSystemId                string                                              `json:"acs_system_id"`
	DisplayName                string                                              `json:"display_name"`
	Code                       *string                                             `json:"code,omitempty"`
	AccessMethod               CredentialsCreateResponseAcsCredentialAccessMethod  `json:"access_method,omitempty"`
	ExternalType               *CredentialsCreateResponseAcsCredentialExternalType `json:"external_type,omitempty"`
	ExternalTypeDisplayName    *string                                             `json:"external_type_display_name,omitempty"`
	CreatedAt                  time.Time                                           `json:"created_at"`
	WorkspaceId                string                                              `json:"workspace_id"`
	StartsAt                   *string                                             `json:"starts_at,omitempty"`
	EndsAt                     *string                                             `json:"ends_at,omitempty"`
	IsMultiPhoneSyncCredential *bool                                               `json:"is_multi_phone_sync_credential,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CredentialsCreateResponseAcsCredential) UnmarshalJSON(data []byte) error {
	type unmarshaler CredentialsCreateResponseAcsCredential
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CredentialsCreateResponseAcsCredential(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CredentialsCreateResponseAcsCredential) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CredentialsCreateResponseAcsCredentialAccessMethod string

const (
	CredentialsCreateResponseAcsCredentialAccessMethodCode      CredentialsCreateResponseAcsCredentialAccessMethod = "code"
	CredentialsCreateResponseAcsCredentialAccessMethodCard      CredentialsCreateResponseAcsCredentialAccessMethod = "card"
	CredentialsCreateResponseAcsCredentialAccessMethodMobileKey CredentialsCreateResponseAcsCredentialAccessMethod = "mobile_key"
)

func NewCredentialsCreateResponseAcsCredentialAccessMethodFromString(s string) (CredentialsCreateResponseAcsCredentialAccessMethod, error) {
	switch s {
	case "code":
		return CredentialsCreateResponseAcsCredentialAccessMethodCode, nil
	case "card":
		return CredentialsCreateResponseAcsCredentialAccessMethodCard, nil
	case "mobile_key":
		return CredentialsCreateResponseAcsCredentialAccessMethodMobileKey, nil
	}
	var t CredentialsCreateResponseAcsCredentialAccessMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CredentialsCreateResponseAcsCredentialAccessMethod) Ptr() *CredentialsCreateResponseAcsCredentialAccessMethod {
	return &c
}

type CredentialsCreateResponseAcsCredentialExternalType string

const (
	CredentialsCreateResponseAcsCredentialExternalTypePtiCard         CredentialsCreateResponseAcsCredentialExternalType = "pti_card"
	CredentialsCreateResponseAcsCredentialExternalTypeBrivoCredential CredentialsCreateResponseAcsCredentialExternalType = "brivo_credential"
	CredentialsCreateResponseAcsCredentialExternalTypeHidCredential   CredentialsCreateResponseAcsCredentialExternalType = "hid_credential"
	CredentialsCreateResponseAcsCredentialExternalTypeVisionlineCard  CredentialsCreateResponseAcsCredentialExternalType = "visionline_card"
)

func NewCredentialsCreateResponseAcsCredentialExternalTypeFromString(s string) (CredentialsCreateResponseAcsCredentialExternalType, error) {
	switch s {
	case "pti_card":
		return CredentialsCreateResponseAcsCredentialExternalTypePtiCard, nil
	case "brivo_credential":
		return CredentialsCreateResponseAcsCredentialExternalTypeBrivoCredential, nil
	case "hid_credential":
		return CredentialsCreateResponseAcsCredentialExternalTypeHidCredential, nil
	case "visionline_card":
		return CredentialsCreateResponseAcsCredentialExternalTypeVisionlineCard, nil
	}
	var t CredentialsCreateResponseAcsCredentialExternalType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CredentialsCreateResponseAcsCredentialExternalType) Ptr() *CredentialsCreateResponseAcsCredentialExternalType {
	return &c
}

type CredentialsGetResponseAcsCredential struct {
	AcsCredentialId            string                                           `json:"acs_credential_id"`
	AcsUserId                  *string                                          `json:"acs_user_id,omitempty"`
	AcsCredentialPoolId        *string                                          `json:"acs_credential_pool_id,omitempty"`
	AcsSystemId                string                                           `json:"acs_system_id"`
	DisplayName                string                                           `json:"display_name"`
	Code                       *string                                          `json:"code,omitempty"`
	AccessMethod               CredentialsGetResponseAcsCredentialAccessMethod  `json:"access_method,omitempty"`
	ExternalType               *CredentialsGetResponseAcsCredentialExternalType `json:"external_type,omitempty"`
	ExternalTypeDisplayName    *string                                          `json:"external_type_display_name,omitempty"`
	CreatedAt                  time.Time                                        `json:"created_at"`
	WorkspaceId                string                                           `json:"workspace_id"`
	StartsAt                   *string                                          `json:"starts_at,omitempty"`
	EndsAt                     *string                                          `json:"ends_at,omitempty"`
	IsMultiPhoneSyncCredential *bool                                            `json:"is_multi_phone_sync_credential,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CredentialsGetResponseAcsCredential) UnmarshalJSON(data []byte) error {
	type unmarshaler CredentialsGetResponseAcsCredential
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CredentialsGetResponseAcsCredential(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CredentialsGetResponseAcsCredential) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CredentialsGetResponseAcsCredentialAccessMethod string

const (
	CredentialsGetResponseAcsCredentialAccessMethodCode      CredentialsGetResponseAcsCredentialAccessMethod = "code"
	CredentialsGetResponseAcsCredentialAccessMethodCard      CredentialsGetResponseAcsCredentialAccessMethod = "card"
	CredentialsGetResponseAcsCredentialAccessMethodMobileKey CredentialsGetResponseAcsCredentialAccessMethod = "mobile_key"
)

func NewCredentialsGetResponseAcsCredentialAccessMethodFromString(s string) (CredentialsGetResponseAcsCredentialAccessMethod, error) {
	switch s {
	case "code":
		return CredentialsGetResponseAcsCredentialAccessMethodCode, nil
	case "card":
		return CredentialsGetResponseAcsCredentialAccessMethodCard, nil
	case "mobile_key":
		return CredentialsGetResponseAcsCredentialAccessMethodMobileKey, nil
	}
	var t CredentialsGetResponseAcsCredentialAccessMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CredentialsGetResponseAcsCredentialAccessMethod) Ptr() *CredentialsGetResponseAcsCredentialAccessMethod {
	return &c
}

type CredentialsGetResponseAcsCredentialExternalType string

const (
	CredentialsGetResponseAcsCredentialExternalTypePtiCard         CredentialsGetResponseAcsCredentialExternalType = "pti_card"
	CredentialsGetResponseAcsCredentialExternalTypeBrivoCredential CredentialsGetResponseAcsCredentialExternalType = "brivo_credential"
	CredentialsGetResponseAcsCredentialExternalTypeHidCredential   CredentialsGetResponseAcsCredentialExternalType = "hid_credential"
	CredentialsGetResponseAcsCredentialExternalTypeVisionlineCard  CredentialsGetResponseAcsCredentialExternalType = "visionline_card"
)

func NewCredentialsGetResponseAcsCredentialExternalTypeFromString(s string) (CredentialsGetResponseAcsCredentialExternalType, error) {
	switch s {
	case "pti_card":
		return CredentialsGetResponseAcsCredentialExternalTypePtiCard, nil
	case "brivo_credential":
		return CredentialsGetResponseAcsCredentialExternalTypeBrivoCredential, nil
	case "hid_credential":
		return CredentialsGetResponseAcsCredentialExternalTypeHidCredential, nil
	case "visionline_card":
		return CredentialsGetResponseAcsCredentialExternalTypeVisionlineCard, nil
	}
	var t CredentialsGetResponseAcsCredentialExternalType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CredentialsGetResponseAcsCredentialExternalType) Ptr() *CredentialsGetResponseAcsCredentialExternalType {
	return &c
}

type CredentialsListRequestOne struct {
	AcsSystemId string `json:"acs_system_id"`

	_rawJSON json.RawMessage
}

func (c *CredentialsListRequestOne) UnmarshalJSON(data []byte) error {
	type unmarshaler CredentialsListRequestOne
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CredentialsListRequestOne(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CredentialsListRequestOne) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CredentialsListRequestTwo struct {
	AcsUserId   string `json:"acs_user_id"`
	AcsSystemId string `json:"acs_system_id"`

	_rawJSON json.RawMessage
}

func (c *CredentialsListRequestTwo) UnmarshalJSON(data []byte) error {
	type unmarshaler CredentialsListRequestTwo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CredentialsListRequestTwo(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CredentialsListRequestTwo) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CredentialsListRequestUserIdentityId struct {
	UserIdentityId string `json:"user_identity_id"`

	_rawJSON json.RawMessage
}

func (c *CredentialsListRequestUserIdentityId) UnmarshalJSON(data []byte) error {
	type unmarshaler CredentialsListRequestUserIdentityId
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CredentialsListRequestUserIdentityId(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CredentialsListRequestUserIdentityId) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CredentialsListRequestZero struct {
	AcsUserId string `json:"acs_user_id"`

	_rawJSON json.RawMessage
}

func (c *CredentialsListRequestZero) UnmarshalJSON(data []byte) error {
	type unmarshaler CredentialsListRequestZero
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CredentialsListRequestZero(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CredentialsListRequestZero) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CredentialsListResponseAcsCredentialsItem struct {
	AcsCredentialId            string                                                 `json:"acs_credential_id"`
	AcsUserId                  *string                                                `json:"acs_user_id,omitempty"`
	AcsCredentialPoolId        *string                                                `json:"acs_credential_pool_id,omitempty"`
	AcsSystemId                string                                                 `json:"acs_system_id"`
	DisplayName                string                                                 `json:"display_name"`
	Code                       *string                                                `json:"code,omitempty"`
	AccessMethod               CredentialsListResponseAcsCredentialsItemAccessMethod  `json:"access_method,omitempty"`
	ExternalType               *CredentialsListResponseAcsCredentialsItemExternalType `json:"external_type,omitempty"`
	ExternalTypeDisplayName    *string                                                `json:"external_type_display_name,omitempty"`
	CreatedAt                  time.Time                                              `json:"created_at"`
	WorkspaceId                string                                                 `json:"workspace_id"`
	StartsAt                   *string                                                `json:"starts_at,omitempty"`
	EndsAt                     *string                                                `json:"ends_at,omitempty"`
	IsMultiPhoneSyncCredential *bool                                                  `json:"is_multi_phone_sync_credential,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CredentialsListResponseAcsCredentialsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler CredentialsListResponseAcsCredentialsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CredentialsListResponseAcsCredentialsItem(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CredentialsListResponseAcsCredentialsItem) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CredentialsListResponseAcsCredentialsItemAccessMethod string

const (
	CredentialsListResponseAcsCredentialsItemAccessMethodCode      CredentialsListResponseAcsCredentialsItemAccessMethod = "code"
	CredentialsListResponseAcsCredentialsItemAccessMethodCard      CredentialsListResponseAcsCredentialsItemAccessMethod = "card"
	CredentialsListResponseAcsCredentialsItemAccessMethodMobileKey CredentialsListResponseAcsCredentialsItemAccessMethod = "mobile_key"
)

func NewCredentialsListResponseAcsCredentialsItemAccessMethodFromString(s string) (CredentialsListResponseAcsCredentialsItemAccessMethod, error) {
	switch s {
	case "code":
		return CredentialsListResponseAcsCredentialsItemAccessMethodCode, nil
	case "card":
		return CredentialsListResponseAcsCredentialsItemAccessMethodCard, nil
	case "mobile_key":
		return CredentialsListResponseAcsCredentialsItemAccessMethodMobileKey, nil
	}
	var t CredentialsListResponseAcsCredentialsItemAccessMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CredentialsListResponseAcsCredentialsItemAccessMethod) Ptr() *CredentialsListResponseAcsCredentialsItemAccessMethod {
	return &c
}

type CredentialsListResponseAcsCredentialsItemExternalType string

const (
	CredentialsListResponseAcsCredentialsItemExternalTypePtiCard         CredentialsListResponseAcsCredentialsItemExternalType = "pti_card"
	CredentialsListResponseAcsCredentialsItemExternalTypeBrivoCredential CredentialsListResponseAcsCredentialsItemExternalType = "brivo_credential"
	CredentialsListResponseAcsCredentialsItemExternalTypeHidCredential   CredentialsListResponseAcsCredentialsItemExternalType = "hid_credential"
	CredentialsListResponseAcsCredentialsItemExternalTypeVisionlineCard  CredentialsListResponseAcsCredentialsItemExternalType = "visionline_card"
)

func NewCredentialsListResponseAcsCredentialsItemExternalTypeFromString(s string) (CredentialsListResponseAcsCredentialsItemExternalType, error) {
	switch s {
	case "pti_card":
		return CredentialsListResponseAcsCredentialsItemExternalTypePtiCard, nil
	case "brivo_credential":
		return CredentialsListResponseAcsCredentialsItemExternalTypeBrivoCredential, nil
	case "hid_credential":
		return CredentialsListResponseAcsCredentialsItemExternalTypeHidCredential, nil
	case "visionline_card":
		return CredentialsListResponseAcsCredentialsItemExternalTypeVisionlineCard, nil
	}
	var t CredentialsListResponseAcsCredentialsItemExternalType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CredentialsListResponseAcsCredentialsItemExternalType) Ptr() *CredentialsListResponseAcsCredentialsItemExternalType {
	return &c
}

type CredentialsUnassignResponseAcsCredential struct {
	AcsCredentialId            string                                                `json:"acs_credential_id"`
	AcsUserId                  *string                                               `json:"acs_user_id,omitempty"`
	AcsCredentialPoolId        *string                                               `json:"acs_credential_pool_id,omitempty"`
	AcsSystemId                string                                                `json:"acs_system_id"`
	DisplayName                string                                                `json:"display_name"`
	Code                       *string                                               `json:"code,omitempty"`
	AccessMethod               CredentialsUnassignResponseAcsCredentialAccessMethod  `json:"access_method,omitempty"`
	ExternalType               *CredentialsUnassignResponseAcsCredentialExternalType `json:"external_type,omitempty"`
	ExternalTypeDisplayName    *string                                               `json:"external_type_display_name,omitempty"`
	CreatedAt                  time.Time                                             `json:"created_at"`
	WorkspaceId                string                                                `json:"workspace_id"`
	StartsAt                   *string                                               `json:"starts_at,omitempty"`
	EndsAt                     *string                                               `json:"ends_at,omitempty"`
	IsMultiPhoneSyncCredential *bool                                                 `json:"is_multi_phone_sync_credential,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CredentialsUnassignResponseAcsCredential) UnmarshalJSON(data []byte) error {
	type unmarshaler CredentialsUnassignResponseAcsCredential
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CredentialsUnassignResponseAcsCredential(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CredentialsUnassignResponseAcsCredential) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CredentialsUnassignResponseAcsCredentialAccessMethod string

const (
	CredentialsUnassignResponseAcsCredentialAccessMethodCode      CredentialsUnassignResponseAcsCredentialAccessMethod = "code"
	CredentialsUnassignResponseAcsCredentialAccessMethodCard      CredentialsUnassignResponseAcsCredentialAccessMethod = "card"
	CredentialsUnassignResponseAcsCredentialAccessMethodMobileKey CredentialsUnassignResponseAcsCredentialAccessMethod = "mobile_key"
)

func NewCredentialsUnassignResponseAcsCredentialAccessMethodFromString(s string) (CredentialsUnassignResponseAcsCredentialAccessMethod, error) {
	switch s {
	case "code":
		return CredentialsUnassignResponseAcsCredentialAccessMethodCode, nil
	case "card":
		return CredentialsUnassignResponseAcsCredentialAccessMethodCard, nil
	case "mobile_key":
		return CredentialsUnassignResponseAcsCredentialAccessMethodMobileKey, nil
	}
	var t CredentialsUnassignResponseAcsCredentialAccessMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CredentialsUnassignResponseAcsCredentialAccessMethod) Ptr() *CredentialsUnassignResponseAcsCredentialAccessMethod {
	return &c
}

type CredentialsUnassignResponseAcsCredentialExternalType string

const (
	CredentialsUnassignResponseAcsCredentialExternalTypePtiCard         CredentialsUnassignResponseAcsCredentialExternalType = "pti_card"
	CredentialsUnassignResponseAcsCredentialExternalTypeBrivoCredential CredentialsUnassignResponseAcsCredentialExternalType = "brivo_credential"
	CredentialsUnassignResponseAcsCredentialExternalTypeHidCredential   CredentialsUnassignResponseAcsCredentialExternalType = "hid_credential"
	CredentialsUnassignResponseAcsCredentialExternalTypeVisionlineCard  CredentialsUnassignResponseAcsCredentialExternalType = "visionline_card"
)

func NewCredentialsUnassignResponseAcsCredentialExternalTypeFromString(s string) (CredentialsUnassignResponseAcsCredentialExternalType, error) {
	switch s {
	case "pti_card":
		return CredentialsUnassignResponseAcsCredentialExternalTypePtiCard, nil
	case "brivo_credential":
		return CredentialsUnassignResponseAcsCredentialExternalTypeBrivoCredential, nil
	case "hid_credential":
		return CredentialsUnassignResponseAcsCredentialExternalTypeHidCredential, nil
	case "visionline_card":
		return CredentialsUnassignResponseAcsCredentialExternalTypeVisionlineCard, nil
	}
	var t CredentialsUnassignResponseAcsCredentialExternalType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CredentialsUnassignResponseAcsCredentialExternalType) Ptr() *CredentialsUnassignResponseAcsCredentialExternalType {
	return &c
}

type CredentialsUpdateResponseAcsCredential struct {
	AcsCredentialId            string                                              `json:"acs_credential_id"`
	AcsUserId                  *string                                             `json:"acs_user_id,omitempty"`
	AcsCredentialPoolId        *string                                             `json:"acs_credential_pool_id,omitempty"`
	AcsSystemId                string                                              `json:"acs_system_id"`
	DisplayName                string                                              `json:"display_name"`
	Code                       *string                                             `json:"code,omitempty"`
	AccessMethod               CredentialsUpdateResponseAcsCredentialAccessMethod  `json:"access_method,omitempty"`
	ExternalType               *CredentialsUpdateResponseAcsCredentialExternalType `json:"external_type,omitempty"`
	ExternalTypeDisplayName    *string                                             `json:"external_type_display_name,omitempty"`
	CreatedAt                  time.Time                                           `json:"created_at"`
	WorkspaceId                string                                              `json:"workspace_id"`
	StartsAt                   *string                                             `json:"starts_at,omitempty"`
	EndsAt                     *string                                             `json:"ends_at,omitempty"`
	IsMultiPhoneSyncCredential *bool                                               `json:"is_multi_phone_sync_credential,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CredentialsUpdateResponseAcsCredential) UnmarshalJSON(data []byte) error {
	type unmarshaler CredentialsUpdateResponseAcsCredential
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CredentialsUpdateResponseAcsCredential(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CredentialsUpdateResponseAcsCredential) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CredentialsUpdateResponseAcsCredentialAccessMethod string

const (
	CredentialsUpdateResponseAcsCredentialAccessMethodCode      CredentialsUpdateResponseAcsCredentialAccessMethod = "code"
	CredentialsUpdateResponseAcsCredentialAccessMethodCard      CredentialsUpdateResponseAcsCredentialAccessMethod = "card"
	CredentialsUpdateResponseAcsCredentialAccessMethodMobileKey CredentialsUpdateResponseAcsCredentialAccessMethod = "mobile_key"
)

func NewCredentialsUpdateResponseAcsCredentialAccessMethodFromString(s string) (CredentialsUpdateResponseAcsCredentialAccessMethod, error) {
	switch s {
	case "code":
		return CredentialsUpdateResponseAcsCredentialAccessMethodCode, nil
	case "card":
		return CredentialsUpdateResponseAcsCredentialAccessMethodCard, nil
	case "mobile_key":
		return CredentialsUpdateResponseAcsCredentialAccessMethodMobileKey, nil
	}
	var t CredentialsUpdateResponseAcsCredentialAccessMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CredentialsUpdateResponseAcsCredentialAccessMethod) Ptr() *CredentialsUpdateResponseAcsCredentialAccessMethod {
	return &c
}

type CredentialsUpdateResponseAcsCredentialExternalType string

const (
	CredentialsUpdateResponseAcsCredentialExternalTypePtiCard         CredentialsUpdateResponseAcsCredentialExternalType = "pti_card"
	CredentialsUpdateResponseAcsCredentialExternalTypeBrivoCredential CredentialsUpdateResponseAcsCredentialExternalType = "brivo_credential"
	CredentialsUpdateResponseAcsCredentialExternalTypeHidCredential   CredentialsUpdateResponseAcsCredentialExternalType = "hid_credential"
	CredentialsUpdateResponseAcsCredentialExternalTypeVisionlineCard  CredentialsUpdateResponseAcsCredentialExternalType = "visionline_card"
)

func NewCredentialsUpdateResponseAcsCredentialExternalTypeFromString(s string) (CredentialsUpdateResponseAcsCredentialExternalType, error) {
	switch s {
	case "pti_card":
		return CredentialsUpdateResponseAcsCredentialExternalTypePtiCard, nil
	case "brivo_credential":
		return CredentialsUpdateResponseAcsCredentialExternalTypeBrivoCredential, nil
	case "hid_credential":
		return CredentialsUpdateResponseAcsCredentialExternalTypeHidCredential, nil
	case "visionline_card":
		return CredentialsUpdateResponseAcsCredentialExternalTypeVisionlineCard, nil
	}
	var t CredentialsUpdateResponseAcsCredentialExternalType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CredentialsUpdateResponseAcsCredentialExternalType) Ptr() *CredentialsUpdateResponseAcsCredentialExternalType {
	return &c
}

type EntrancesGetResponseAcsEntrance struct {
	AcsEntranceId      string                                             `json:"acs_entrance_id"`
	DisplayName        string                                             `json:"display_name"`
	AcsSystemId        string                                             `json:"acs_system_id"`
	CreatedAt          time.Time                                          `json:"created_at"`
	VisionlineMetadata *EntrancesGetResponseAcsEntranceVisionlineMetadata `json:"visionline_metadata,omitempty"`

	_rawJSON json.RawMessage
}

func (e *EntrancesGetResponseAcsEntrance) UnmarshalJSON(data []byte) error {
	type unmarshaler EntrancesGetResponseAcsEntrance
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EntrancesGetResponseAcsEntrance(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntrancesGetResponseAcsEntrance) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EntrancesGetResponseAcsEntranceVisionlineMetadata struct {
	DoorName string                                                           `json:"door_name"`
	Profiles []*EntrancesGetResponseAcsEntranceVisionlineMetadataProfilesItem `json:"profiles,omitempty"`

	_rawJSON json.RawMessage
}

func (e *EntrancesGetResponseAcsEntranceVisionlineMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler EntrancesGetResponseAcsEntranceVisionlineMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EntrancesGetResponseAcsEntranceVisionlineMetadata(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntrancesGetResponseAcsEntranceVisionlineMetadata) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EntrancesGetResponseAcsEntranceVisionlineMetadataProfilesItem struct {
	VisionlineDoorProfileId   string                                                                                 `json:"visionline_door_profile_id"`
	VisionlineDoorProfileType EntrancesGetResponseAcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileType `json:"visionline_door_profile_type,omitempty"`

	_rawJSON json.RawMessage
}

func (e *EntrancesGetResponseAcsEntranceVisionlineMetadataProfilesItem) UnmarshalJSON(data []byte) error {
	type unmarshaler EntrancesGetResponseAcsEntranceVisionlineMetadataProfilesItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EntrancesGetResponseAcsEntranceVisionlineMetadataProfilesItem(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntrancesGetResponseAcsEntranceVisionlineMetadataProfilesItem) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EntrancesGetResponseAcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileType string

const (
	EntrancesGetResponseAcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileTypeBle        EntrancesGetResponseAcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileType = "BLE"
	EntrancesGetResponseAcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileTypeCommonDoor EntrancesGetResponseAcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileType = "commonDoor"
	EntrancesGetResponseAcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileTypeTouch      EntrancesGetResponseAcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileType = "touch"
)

func NewEntrancesGetResponseAcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileTypeFromString(s string) (EntrancesGetResponseAcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileType, error) {
	switch s {
	case "BLE":
		return EntrancesGetResponseAcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileTypeBle, nil
	case "commonDoor":
		return EntrancesGetResponseAcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileTypeCommonDoor, nil
	case "touch":
		return EntrancesGetResponseAcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileTypeTouch, nil
	}
	var t EntrancesGetResponseAcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EntrancesGetResponseAcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileType) Ptr() *EntrancesGetResponseAcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileType {
	return &e
}

type EntrancesListCredentialsWithAccessResponseAcsCredentialsItem struct {
	AcsCredentialId            string                                                                    `json:"acs_credential_id"`
	AcsUserId                  *string                                                                   `json:"acs_user_id,omitempty"`
	AcsCredentialPoolId        *string                                                                   `json:"acs_credential_pool_id,omitempty"`
	AcsSystemId                string                                                                    `json:"acs_system_id"`
	DisplayName                string                                                                    `json:"display_name"`
	Code                       *string                                                                   `json:"code,omitempty"`
	AccessMethod               EntrancesListCredentialsWithAccessResponseAcsCredentialsItemAccessMethod  `json:"access_method,omitempty"`
	ExternalType               *EntrancesListCredentialsWithAccessResponseAcsCredentialsItemExternalType `json:"external_type,omitempty"`
	ExternalTypeDisplayName    *string                                                                   `json:"external_type_display_name,omitempty"`
	CreatedAt                  time.Time                                                                 `json:"created_at"`
	WorkspaceId                string                                                                    `json:"workspace_id"`
	StartsAt                   *string                                                                   `json:"starts_at,omitempty"`
	EndsAt                     *string                                                                   `json:"ends_at,omitempty"`
	IsMultiPhoneSyncCredential *bool                                                                     `json:"is_multi_phone_sync_credential,omitempty"`

	_rawJSON json.RawMessage
}

func (e *EntrancesListCredentialsWithAccessResponseAcsCredentialsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler EntrancesListCredentialsWithAccessResponseAcsCredentialsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EntrancesListCredentialsWithAccessResponseAcsCredentialsItem(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntrancesListCredentialsWithAccessResponseAcsCredentialsItem) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EntrancesListCredentialsWithAccessResponseAcsCredentialsItemAccessMethod string

const (
	EntrancesListCredentialsWithAccessResponseAcsCredentialsItemAccessMethodCode      EntrancesListCredentialsWithAccessResponseAcsCredentialsItemAccessMethod = "code"
	EntrancesListCredentialsWithAccessResponseAcsCredentialsItemAccessMethodCard      EntrancesListCredentialsWithAccessResponseAcsCredentialsItemAccessMethod = "card"
	EntrancesListCredentialsWithAccessResponseAcsCredentialsItemAccessMethodMobileKey EntrancesListCredentialsWithAccessResponseAcsCredentialsItemAccessMethod = "mobile_key"
)

func NewEntrancesListCredentialsWithAccessResponseAcsCredentialsItemAccessMethodFromString(s string) (EntrancesListCredentialsWithAccessResponseAcsCredentialsItemAccessMethod, error) {
	switch s {
	case "code":
		return EntrancesListCredentialsWithAccessResponseAcsCredentialsItemAccessMethodCode, nil
	case "card":
		return EntrancesListCredentialsWithAccessResponseAcsCredentialsItemAccessMethodCard, nil
	case "mobile_key":
		return EntrancesListCredentialsWithAccessResponseAcsCredentialsItemAccessMethodMobileKey, nil
	}
	var t EntrancesListCredentialsWithAccessResponseAcsCredentialsItemAccessMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EntrancesListCredentialsWithAccessResponseAcsCredentialsItemAccessMethod) Ptr() *EntrancesListCredentialsWithAccessResponseAcsCredentialsItemAccessMethod {
	return &e
}

type EntrancesListCredentialsWithAccessResponseAcsCredentialsItemExternalType string

const (
	EntrancesListCredentialsWithAccessResponseAcsCredentialsItemExternalTypePtiCard         EntrancesListCredentialsWithAccessResponseAcsCredentialsItemExternalType = "pti_card"
	EntrancesListCredentialsWithAccessResponseAcsCredentialsItemExternalTypeBrivoCredential EntrancesListCredentialsWithAccessResponseAcsCredentialsItemExternalType = "brivo_credential"
	EntrancesListCredentialsWithAccessResponseAcsCredentialsItemExternalTypeHidCredential   EntrancesListCredentialsWithAccessResponseAcsCredentialsItemExternalType = "hid_credential"
	EntrancesListCredentialsWithAccessResponseAcsCredentialsItemExternalTypeVisionlineCard  EntrancesListCredentialsWithAccessResponseAcsCredentialsItemExternalType = "visionline_card"
)

func NewEntrancesListCredentialsWithAccessResponseAcsCredentialsItemExternalTypeFromString(s string) (EntrancesListCredentialsWithAccessResponseAcsCredentialsItemExternalType, error) {
	switch s {
	case "pti_card":
		return EntrancesListCredentialsWithAccessResponseAcsCredentialsItemExternalTypePtiCard, nil
	case "brivo_credential":
		return EntrancesListCredentialsWithAccessResponseAcsCredentialsItemExternalTypeBrivoCredential, nil
	case "hid_credential":
		return EntrancesListCredentialsWithAccessResponseAcsCredentialsItemExternalTypeHidCredential, nil
	case "visionline_card":
		return EntrancesListCredentialsWithAccessResponseAcsCredentialsItemExternalTypeVisionlineCard, nil
	}
	var t EntrancesListCredentialsWithAccessResponseAcsCredentialsItemExternalType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EntrancesListCredentialsWithAccessResponseAcsCredentialsItemExternalType) Ptr() *EntrancesListCredentialsWithAccessResponseAcsCredentialsItemExternalType {
	return &e
}

type EntrancesListResponseAcsEntrancesItem struct {
	AcsEntranceId      string                                                   `json:"acs_entrance_id"`
	DisplayName        string                                                   `json:"display_name"`
	AcsSystemId        string                                                   `json:"acs_system_id"`
	CreatedAt          time.Time                                                `json:"created_at"`
	VisionlineMetadata *EntrancesListResponseAcsEntrancesItemVisionlineMetadata `json:"visionline_metadata,omitempty"`

	_rawJSON json.RawMessage
}

func (e *EntrancesListResponseAcsEntrancesItem) UnmarshalJSON(data []byte) error {
	type unmarshaler EntrancesListResponseAcsEntrancesItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EntrancesListResponseAcsEntrancesItem(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntrancesListResponseAcsEntrancesItem) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EntrancesListResponseAcsEntrancesItemVisionlineMetadata struct {
	DoorName string                                                                 `json:"door_name"`
	Profiles []*EntrancesListResponseAcsEntrancesItemVisionlineMetadataProfilesItem `json:"profiles,omitempty"`

	_rawJSON json.RawMessage
}

func (e *EntrancesListResponseAcsEntrancesItemVisionlineMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler EntrancesListResponseAcsEntrancesItemVisionlineMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EntrancesListResponseAcsEntrancesItemVisionlineMetadata(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntrancesListResponseAcsEntrancesItemVisionlineMetadata) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EntrancesListResponseAcsEntrancesItemVisionlineMetadataProfilesItem struct {
	VisionlineDoorProfileId   string                                                                                       `json:"visionline_door_profile_id"`
	VisionlineDoorProfileType EntrancesListResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileType `json:"visionline_door_profile_type,omitempty"`

	_rawJSON json.RawMessage
}

func (e *EntrancesListResponseAcsEntrancesItemVisionlineMetadataProfilesItem) UnmarshalJSON(data []byte) error {
	type unmarshaler EntrancesListResponseAcsEntrancesItemVisionlineMetadataProfilesItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EntrancesListResponseAcsEntrancesItemVisionlineMetadataProfilesItem(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntrancesListResponseAcsEntrancesItemVisionlineMetadataProfilesItem) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EntrancesListResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileType string

const (
	EntrancesListResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileTypeBle        EntrancesListResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileType = "BLE"
	EntrancesListResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileTypeCommonDoor EntrancesListResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileType = "commonDoor"
	EntrancesListResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileTypeTouch      EntrancesListResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileType = "touch"
)

func NewEntrancesListResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileTypeFromString(s string) (EntrancesListResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileType, error) {
	switch s {
	case "BLE":
		return EntrancesListResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileTypeBle, nil
	case "commonDoor":
		return EntrancesListResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileTypeCommonDoor, nil
	case "touch":
		return EntrancesListResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileTypeTouch, nil
	}
	var t EntrancesListResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EntrancesListResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileType) Ptr() *EntrancesListResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileType {
	return &e
}

type UsersListAccessibleEntrancesResponseAcsEntrancesItem struct {
	AcsEntranceId      string                                                                  `json:"acs_entrance_id"`
	DisplayName        string                                                                  `json:"display_name"`
	AcsSystemId        string                                                                  `json:"acs_system_id"`
	CreatedAt          time.Time                                                               `json:"created_at"`
	VisionlineMetadata *UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadata `json:"visionline_metadata,omitempty"`

	_rawJSON json.RawMessage
}

func (u *UsersListAccessibleEntrancesResponseAcsEntrancesItem) UnmarshalJSON(data []byte) error {
	type unmarshaler UsersListAccessibleEntrancesResponseAcsEntrancesItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UsersListAccessibleEntrancesResponseAcsEntrancesItem(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UsersListAccessibleEntrancesResponseAcsEntrancesItem) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadata struct {
	DoorName string                                                                                `json:"door_name"`
	Profiles []*UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataProfilesItem `json:"profiles,omitempty"`

	_rawJSON json.RawMessage
}

func (u *UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadata(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadata) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataProfilesItem struct {
	VisionlineDoorProfileId   string                                                                                                      `json:"visionline_door_profile_id"`
	VisionlineDoorProfileType UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileType `json:"visionline_door_profile_type,omitempty"`

	_rawJSON json.RawMessage
}

func (u *UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataProfilesItem) UnmarshalJSON(data []byte) error {
	type unmarshaler UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataProfilesItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataProfilesItem(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataProfilesItem) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileType string

const (
	UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileTypeBle        UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileType = "BLE"
	UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileTypeCommonDoor UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileType = "commonDoor"
	UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileTypeTouch      UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileType = "touch"
)

func NewUsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileTypeFromString(s string) (UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileType, error) {
	switch s {
	case "BLE":
		return UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileTypeBle, nil
	case "commonDoor":
		return UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileTypeCommonDoor, nil
	case "touch":
		return UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileTypeTouch, nil
	}
	var t UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileType) Ptr() *UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileType {
	return &u
}
