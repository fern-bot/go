// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/seamapi/go/core"
	time "time"
)

type AccessCode struct {
	// Unique identifier for a group of access codes that share the same code.
	CommonCodeKey *string `json:"common_code_key,omitempty"`
	// Indicates whether the code is set on the device according to a preconfigured schedule.
	IsScheduledOnDevice *bool `json:"is_scheduled_on_device,omitempty"`
	// Nature of the access code. Values are "ongoing" for access codes that are active continuously until deactivated manually or "time_bound" for access codes that have a specific duration.
	Type AccessCodeType `json:"type,omitempty"`
	// Indicates whether the access code is waiting for a code assignment.
	IsWaitingForCodeAssignment *bool `json:"is_waiting_for_code_assignment,omitempty"`
	// Unique identifier for the access code.
	AccessCodeId string `json:"access_code_id"`
	// Unique identifier for the device associated with the access code.
	DeviceId string `json:"device_id"`
	// Name of the access code. Enables administrators and users to identify the access code easily, especially when there are numerous access codes.
	Name *string `json:"name,omitempty"`
	// Code used for access. Typically, a numeric or alphanumeric string.
	Code *string `json:"code,omitempty"`
	// Date and time at which the access code was created.
	CreatedAt time.Time   `json:"created_at"`
	Errors    interface{} `json:"errors,omitempty"`
	Warnings  interface{} `json:"warnings,omitempty"`
	// Indicates whether Seam manages the access code.
	IsManaged string `json:"is_managed"`
	// Date and time at which the time-bound access code becomes active.
	StartsAt *time.Time `json:"starts_at,omitempty"`
	// Date and time after which the time-bound access code becomes inactive.
	EndsAt *time.Time `json:"ends_at,omitempty"`
	// Current status of the access code within the operational lifecycle. Values are "setting," a transitional phase that indicates that the code is being configured or activated; "set", which indicates that the code is active and operational; "unset," which indicates a deactivated or unused state, either before activation or after deliberate deactivation; "removing," which indicates a transitional period in which the code is being deleted or made inactive; and "unknown," which indicates an indeterminate state, due to reasons such as system errors or incomplete data, that highlights a potential need for system review or troubleshooting.
	Status AccessCodeStatus `json:"status,omitempty"`
	// Indicates whether a backup access code is available for use if the primary access code is lost or compromised.
	IsBackupAccessCodeAvailable bool `json:"is_backup_access_code_available"`
	// Indicates whether the access code is a backup code.
	IsBackup *bool `json:"is_backup,omitempty"`
	// Identifier of the pulled backup access code. Used to associate the pulled backup access code with the original access code.
	PulledBackupAccessCodeId *string `json:"pulled_backup_access_code_id,omitempty"`
	// Indicates whether changes to the access code from external sources are permitted.
	IsExternalModificationAllowed bool `json:"is_external_modification_allowed"`
	// Indicates whether the access code can only be used once. If "true," the code becomes invalid after the first use.
	IsOneTimeUse bool `json:"is_one_time_use"`
	// Indicates whether the access code is intended for use in offline scenarios. If "true," this code can be created on a device without a network connection.
	IsOfflineAccessCode bool `json:"is_offline_access_code"`

	_rawJSON json.RawMessage
}

func (a *AccessCode) UnmarshalJSON(data []byte) error {
	type unmarshaler AccessCode
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccessCode(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccessCode) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Current status of the access code within the operational lifecycle. Values are "setting," a transitional phase that indicates that the code is being configured or activated; "set", which indicates that the code is active and operational; "unset," which indicates a deactivated or unused state, either before activation or after deliberate deactivation; "removing," which indicates a transitional period in which the code is being deleted or made inactive; and "unknown," which indicates an indeterminate state, due to reasons such as system errors or incomplete data, that highlights a potential need for system review or troubleshooting.
type AccessCodeStatus string

const (
	AccessCodeStatusSetting  AccessCodeStatus = "setting"
	AccessCodeStatusSet      AccessCodeStatus = "set"
	AccessCodeStatusUnset    AccessCodeStatus = "unset"
	AccessCodeStatusRemoving AccessCodeStatus = "removing"
	AccessCodeStatusUnknown  AccessCodeStatus = "unknown"
)

func NewAccessCodeStatusFromString(s string) (AccessCodeStatus, error) {
	switch s {
	case "setting":
		return AccessCodeStatusSetting, nil
	case "set":
		return AccessCodeStatusSet, nil
	case "unset":
		return AccessCodeStatusUnset, nil
	case "removing":
		return AccessCodeStatusRemoving, nil
	case "unknown":
		return AccessCodeStatusUnknown, nil
	}
	var t AccessCodeStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AccessCodeStatus) Ptr() *AccessCodeStatus {
	return &a
}

// Nature of the access code. Values are "ongoing" for access codes that are active continuously until deactivated manually or "time_bound" for access codes that have a specific duration.
type AccessCodeType string

const (
	AccessCodeTypeTimeBound AccessCodeType = "time_bound"
	AccessCodeTypeOngoing   AccessCodeType = "ongoing"
)

func NewAccessCodeTypeFromString(s string) (AccessCodeType, error) {
	switch s {
	case "time_bound":
		return AccessCodeTypeTimeBound, nil
	case "ongoing":
		return AccessCodeTypeOngoing, nil
	}
	var t AccessCodeType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AccessCodeType) Ptr() *AccessCodeType {
	return &a
}

type AcsAccessGroup struct {
	AcsAccessGroupId string `json:"acs_access_group_id"`
	AcsSystemId      string `json:"acs_system_id"`
	WorkspaceId      string `json:"workspace_id"`
	Name             string `json:"name"`
	// deprecated: use external_type
	AccessGroupType AcsAccessGroupAccessGroupType `json:"access_group_type,omitempty"`
	// deprecated: use external_type_display_name
	AccessGroupTypeDisplayName string                     `json:"access_group_type_display_name"`
	ExternalType               AcsAccessGroupExternalType `json:"external_type,omitempty"`
	ExternalTypeDisplayName    string                     `json:"external_type_display_name"`
	CreatedAt                  time.Time                  `json:"created_at"`

	_rawJSON json.RawMessage
}

func (a *AcsAccessGroup) UnmarshalJSON(data []byte) error {
	type unmarshaler AcsAccessGroup
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AcsAccessGroup(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AcsAccessGroup) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// deprecated: use external_type
type AcsAccessGroupAccessGroupType string

const (
	AcsAccessGroupAccessGroupTypePtiUnit          AcsAccessGroupAccessGroupType = "pti_unit"
	AcsAccessGroupAccessGroupTypePtiAccessLevel   AcsAccessGroupAccessGroupType = "pti_access_level"
	AcsAccessGroupAccessGroupTypeSaltoAccessGroup AcsAccessGroupAccessGroupType = "salto_access_group"
	AcsAccessGroupAccessGroupTypeBrivoGroup       AcsAccessGroupAccessGroupType = "brivo_group"
)

func NewAcsAccessGroupAccessGroupTypeFromString(s string) (AcsAccessGroupAccessGroupType, error) {
	switch s {
	case "pti_unit":
		return AcsAccessGroupAccessGroupTypePtiUnit, nil
	case "pti_access_level":
		return AcsAccessGroupAccessGroupTypePtiAccessLevel, nil
	case "salto_access_group":
		return AcsAccessGroupAccessGroupTypeSaltoAccessGroup, nil
	case "brivo_group":
		return AcsAccessGroupAccessGroupTypeBrivoGroup, nil
	}
	var t AcsAccessGroupAccessGroupType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AcsAccessGroupAccessGroupType) Ptr() *AcsAccessGroupAccessGroupType {
	return &a
}

type AcsAccessGroupExternalType string

const (
	AcsAccessGroupExternalTypePtiUnit          AcsAccessGroupExternalType = "pti_unit"
	AcsAccessGroupExternalTypePtiAccessLevel   AcsAccessGroupExternalType = "pti_access_level"
	AcsAccessGroupExternalTypeSaltoAccessGroup AcsAccessGroupExternalType = "salto_access_group"
	AcsAccessGroupExternalTypeBrivoGroup       AcsAccessGroupExternalType = "brivo_group"
)

func NewAcsAccessGroupExternalTypeFromString(s string) (AcsAccessGroupExternalType, error) {
	switch s {
	case "pti_unit":
		return AcsAccessGroupExternalTypePtiUnit, nil
	case "pti_access_level":
		return AcsAccessGroupExternalTypePtiAccessLevel, nil
	case "salto_access_group":
		return AcsAccessGroupExternalTypeSaltoAccessGroup, nil
	case "brivo_group":
		return AcsAccessGroupExternalTypeBrivoGroup, nil
	}
	var t AcsAccessGroupExternalType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AcsAccessGroupExternalType) Ptr() *AcsAccessGroupExternalType {
	return &a
}

type AcsSystem struct {
	AcsSystemId             string                `json:"acs_system_id"`
	ExternalType            AcsSystemExternalType `json:"external_type,omitempty"`
	ExternalTypeDisplayName string                `json:"external_type_display_name"`
	// deprecated: use external_type
	SystemType AcsSystemSystemType `json:"system_type,omitempty"`
	// deprecated: use external_type_display_name
	SystemTypeDisplayName string    `json:"system_type_display_name"`
	Name                  string    `json:"name"`
	CreatedAt             time.Time `json:"created_at"`
	WorkspaceId           string    `json:"workspace_id"`
	ConnectedAccountIds   []string  `json:"connected_account_ids,omitempty"`

	_rawJSON json.RawMessage
}

func (a *AcsSystem) UnmarshalJSON(data []byte) error {
	type unmarshaler AcsSystem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AcsSystem(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AcsSystem) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AcsSystemExternalType string

const (
	AcsSystemExternalTypePtiSite                          AcsSystemExternalType = "pti_site"
	AcsSystemExternalTypeAltaOrg                          AcsSystemExternalType = "alta_org"
	AcsSystemExternalTypeSaltoSite                        AcsSystemExternalType = "salto_site"
	AcsSystemExternalTypeBrivoAccount                     AcsSystemExternalType = "brivo_account"
	AcsSystemExternalTypeHidCredentialManagerOrganization AcsSystemExternalType = "hid_credential_manager_organization"
	AcsSystemExternalTypeVisionlineSystem                 AcsSystemExternalType = "visionline_system"
	AcsSystemExternalTypeAssaAbloyCredentialService       AcsSystemExternalType = "assa_abloy_credential_service"
)

func NewAcsSystemExternalTypeFromString(s string) (AcsSystemExternalType, error) {
	switch s {
	case "pti_site":
		return AcsSystemExternalTypePtiSite, nil
	case "alta_org":
		return AcsSystemExternalTypeAltaOrg, nil
	case "salto_site":
		return AcsSystemExternalTypeSaltoSite, nil
	case "brivo_account":
		return AcsSystemExternalTypeBrivoAccount, nil
	case "hid_credential_manager_organization":
		return AcsSystemExternalTypeHidCredentialManagerOrganization, nil
	case "visionline_system":
		return AcsSystemExternalTypeVisionlineSystem, nil
	case "assa_abloy_credential_service":
		return AcsSystemExternalTypeAssaAbloyCredentialService, nil
	}
	var t AcsSystemExternalType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AcsSystemExternalType) Ptr() *AcsSystemExternalType {
	return &a
}

// deprecated: use external_type
type AcsSystemSystemType string

const (
	AcsSystemSystemTypePtiSite                          AcsSystemSystemType = "pti_site"
	AcsSystemSystemTypeAltaOrg                          AcsSystemSystemType = "alta_org"
	AcsSystemSystemTypeSaltoSite                        AcsSystemSystemType = "salto_site"
	AcsSystemSystemTypeBrivoAccount                     AcsSystemSystemType = "brivo_account"
	AcsSystemSystemTypeHidCredentialManagerOrganization AcsSystemSystemType = "hid_credential_manager_organization"
	AcsSystemSystemTypeVisionlineSystem                 AcsSystemSystemType = "visionline_system"
	AcsSystemSystemTypeAssaAbloyCredentialService       AcsSystemSystemType = "assa_abloy_credential_service"
)

func NewAcsSystemSystemTypeFromString(s string) (AcsSystemSystemType, error) {
	switch s {
	case "pti_site":
		return AcsSystemSystemTypePtiSite, nil
	case "alta_org":
		return AcsSystemSystemTypeAltaOrg, nil
	case "salto_site":
		return AcsSystemSystemTypeSaltoSite, nil
	case "brivo_account":
		return AcsSystemSystemTypeBrivoAccount, nil
	case "hid_credential_manager_organization":
		return AcsSystemSystemTypeHidCredentialManagerOrganization, nil
	case "visionline_system":
		return AcsSystemSystemTypeVisionlineSystem, nil
	case "assa_abloy_credential_service":
		return AcsSystemSystemTypeAssaAbloyCredentialService, nil
	}
	var t AcsSystemSystemType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AcsSystemSystemType) Ptr() *AcsSystemSystemType {
	return &a
}

type AcsUser struct {
	AcsUserId                string                 `json:"acs_user_id"`
	AcsSystemId              string                 `json:"acs_system_id"`
	HidAcsSystemId           *string                `json:"hid_acs_system_id,omitempty"`
	WorkspaceId              string                 `json:"workspace_id"`
	CreatedAt                time.Time              `json:"created_at"`
	DisplayName              string                 `json:"display_name"`
	ExternalType             *AcsUserExternalType   `json:"external_type,omitempty"`
	ExternalTypeDisplayName  *string                `json:"external_type_display_name,omitempty"`
	IsSuspended              bool                   `json:"is_suspended"`
	AccessSchedule           *AcsUserAccessSchedule `json:"access_schedule,omitempty"`
	UserIdentityId           *string                `json:"user_identity_id,omitempty"`
	UserIdentityEmailAddress *string                `json:"user_identity_email_address,omitempty"`
	UserIdentityPhoneNumber  *string                `json:"user_identity_phone_number,omitempty"`
	FullName                 *string                `json:"full_name,omitempty"`
	// Deprecated: use email_address.
	Email        *string `json:"email,omitempty"`
	EmailAddress *string `json:"email_address,omitempty"`
	PhoneNumber  *string `json:"phone_number,omitempty"`

	_rawJSON json.RawMessage
}

func (a *AcsUser) UnmarshalJSON(data []byte) error {
	type unmarshaler AcsUser
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AcsUser(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AcsUser) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AcsUserAccessSchedule struct {
	StartsAt time.Time `json:"starts_at"`
	EndsAt   time.Time `json:"ends_at"`

	_rawJSON json.RawMessage
}

func (a *AcsUserAccessSchedule) UnmarshalJSON(data []byte) error {
	type unmarshaler AcsUserAccessSchedule
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AcsUserAccessSchedule(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AcsUserAccessSchedule) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AcsUserExternalType string

const (
	AcsUserExternalTypePtiUser                  AcsUserExternalType = "pti_user"
	AcsUserExternalTypeBrivoUser                AcsUserExternalType = "brivo_user"
	AcsUserExternalTypeHidCredentialManagerUser AcsUserExternalType = "hid_credential_manager_user"
	AcsUserExternalTypeSaltoSiteUser            AcsUserExternalType = "salto_site_user"
)

func NewAcsUserExternalTypeFromString(s string) (AcsUserExternalType, error) {
	switch s {
	case "pti_user":
		return AcsUserExternalTypePtiUser, nil
	case "brivo_user":
		return AcsUserExternalTypeBrivoUser, nil
	case "hid_credential_manager_user":
		return AcsUserExternalTypeHidCredentialManagerUser, nil
	case "salto_site_user":
		return AcsUserExternalTypeSaltoSiteUser, nil
	}
	var t AcsUserExternalType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AcsUserExternalType) Ptr() *AcsUserExternalType {
	return &a
}

type ActionAttempt struct {
	Status  string
	Success *ActionAttemptSuccess
	Pending *ActionAttemptPending
	Error   *ActionAttemptError
}

func NewActionAttemptFromSuccess(value *ActionAttemptSuccess) *ActionAttempt {
	return &ActionAttempt{Status: "success", Success: value}
}

func NewActionAttemptFromPending(value *ActionAttemptPending) *ActionAttempt {
	return &ActionAttempt{Status: "pending", Pending: value}
}

func NewActionAttemptFromError(value *ActionAttemptError) *ActionAttempt {
	return &ActionAttempt{Status: "error", Error: value}
}

func (a *ActionAttempt) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Status string `json:"status"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	a.Status = unmarshaler.Status
	switch unmarshaler.Status {
	case "success":
		value := new(ActionAttemptSuccess)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.Success = value
	case "pending":
		value := new(ActionAttemptPending)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.Pending = value
	case "error":
		value := new(ActionAttemptError)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.Error = value
	}
	return nil
}

func (a ActionAttempt) MarshalJSON() ([]byte, error) {
	switch a.Status {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.Status, a)
	case "success":
		var marshaler = struct {
			Status string `json:"status"`
			*ActionAttemptSuccess
		}{
			Status:               a.Status,
			ActionAttemptSuccess: a.Success,
		}
		return json.Marshal(marshaler)
	case "pending":
		var marshaler = struct {
			Status string `json:"status"`
			*ActionAttemptPending
		}{
			Status:               a.Status,
			ActionAttemptPending: a.Pending,
		}
		return json.Marshal(marshaler)
	case "error":
		var marshaler = struct {
			Status string `json:"status"`
			*ActionAttemptError
		}{
			Status:             a.Status,
			ActionAttemptError: a.Error,
		}
		return json.Marshal(marshaler)
	}
}

type ActionAttemptVisitor interface {
	VisitSuccess(*ActionAttemptSuccess) error
	VisitPending(*ActionAttemptPending) error
	VisitError(*ActionAttemptError) error
}

func (a *ActionAttempt) Accept(visitor ActionAttemptVisitor) error {
	switch a.Status {
	default:
		return fmt.Errorf("invalid type %s in %T", a.Status, a)
	case "success":
		return visitor.VisitSuccess(a.Success)
	case "pending":
		return visitor.VisitPending(a.Pending)
	case "error":
		return visitor.VisitError(a.Error)
	}
}

type ActionAttemptError struct {
	ActionType      string                   `json:"action_type"`
	ActionAttemptId string                   `json:"action_attempt_id"`
	Result          *string                  `json:"result,omitempty"`
	Error           *ActionAttemptErrorError `json:"error,omitempty"`

	_rawJSON json.RawMessage
}

func (a *ActionAttemptError) UnmarshalJSON(data []byte) error {
	type unmarshaler ActionAttemptError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActionAttemptError(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptError) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActionAttemptErrorError struct {
	Type    string `json:"type"`
	Message string `json:"message"`

	_rawJSON json.RawMessage
}

func (a *ActionAttemptErrorError) UnmarshalJSON(data []byte) error {
	type unmarshaler ActionAttemptErrorError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActionAttemptErrorError(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptErrorError) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActionAttemptPending struct {
	ActionType      string  `json:"action_type"`
	ActionAttemptId string  `json:"action_attempt_id"`
	Result          *string `json:"result,omitempty"`
	Error           *string `json:"error,omitempty"`

	_rawJSON json.RawMessage
}

func (a *ActionAttemptPending) UnmarshalJSON(data []byte) error {
	type unmarshaler ActionAttemptPending
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActionAttemptPending(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptPending) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActionAttemptSuccess struct {
	ActionType      string      `json:"action_type"`
	ActionAttemptId string      `json:"action_attempt_id"`
	Result          interface{} `json:"result,omitempty"`
	Error           *string     `json:"error,omitempty"`

	_rawJSON json.RawMessage
}

func (a *ActionAttemptSuccess) UnmarshalJSON(data []byte) error {
	type unmarshaler ActionAttemptSuccess
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActionAttemptSuccess(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptSuccess) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ClientSession struct {
	ClientSessionId     string    `json:"client_session_id"`
	UserIdentifierKey   *string   `json:"user_identifier_key,omitempty"`
	CreatedAt           time.Time `json:"created_at"`
	Token               string    `json:"token"`
	DeviceCount         float64   `json:"device_count"`
	ConnectedAccountIds []string  `json:"connected_account_ids,omitempty"`
	ConnectWebviewIds   []string  `json:"connect_webview_ids,omitempty"`
	UserIdentityIds     []string  `json:"user_identity_ids,omitempty"`
	WorkspaceId         string    `json:"workspace_id"`

	_rawJSON json.RawMessage
}

func (c *ClientSession) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientSession
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientSession(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientSession) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClimateSettingSchedule struct {
	ClimateSettingScheduleId  string                                 `json:"climate_setting_schedule_id"`
	DeviceId                  string                                 `json:"device_id"`
	Name                      *string                                `json:"name,omitempty"`
	ScheduleStartsAt          string                                 `json:"schedule_starts_at"`
	ScheduleEndsAt            string                                 `json:"schedule_ends_at"`
	CreatedAt                 time.Time                              `json:"created_at"`
	Errors                    interface{}                            `json:"errors,omitempty"`
	AutomaticHeatingEnabled   *bool                                  `json:"automatic_heating_enabled,omitempty"`
	AutomaticCoolingEnabled   *bool                                  `json:"automatic_cooling_enabled,omitempty"`
	HvacModeSetting           *ClimateSettingScheduleHvacModeSetting `json:"hvac_mode_setting,omitempty"`
	CoolingSetPointCelsius    *float64                               `json:"cooling_set_point_celsius,omitempty"`
	HeatingSetPointCelsius    *float64                               `json:"heating_set_point_celsius,omitempty"`
	CoolingSetPointFahrenheit *float64                               `json:"cooling_set_point_fahrenheit,omitempty"`
	HeatingSetPointFahrenheit *float64                               `json:"heating_set_point_fahrenheit,omitempty"`
	ManualOverrideAllowed     *bool                                  `json:"manual_override_allowed,omitempty"`
	scheduleType              string

	_rawJSON json.RawMessage
}

func (c *ClimateSettingSchedule) ScheduleType() string {
	return c.scheduleType
}

func (c *ClimateSettingSchedule) UnmarshalJSON(data []byte) error {
	type unmarshaler ClimateSettingSchedule
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClimateSettingSchedule(value)
	c.scheduleType = "time_bound"
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClimateSettingSchedule) MarshalJSON() ([]byte, error) {
	type embed ClimateSettingSchedule
	var marshaler = struct {
		embed
		ScheduleType string `json:"schedule_type"`
	}{
		embed:        embed(*c),
		ScheduleType: "time_bound",
	}
	return json.Marshal(marshaler)
}

func (c *ClimateSettingSchedule) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClimateSettingScheduleHvacModeSetting string

const (
	ClimateSettingScheduleHvacModeSettingOff      ClimateSettingScheduleHvacModeSetting = "off"
	ClimateSettingScheduleHvacModeSettingHeat     ClimateSettingScheduleHvacModeSetting = "heat"
	ClimateSettingScheduleHvacModeSettingCool     ClimateSettingScheduleHvacModeSetting = "cool"
	ClimateSettingScheduleHvacModeSettingHeatCool ClimateSettingScheduleHvacModeSetting = "heat_cool"
)

func NewClimateSettingScheduleHvacModeSettingFromString(s string) (ClimateSettingScheduleHvacModeSetting, error) {
	switch s {
	case "off":
		return ClimateSettingScheduleHvacModeSettingOff, nil
	case "heat":
		return ClimateSettingScheduleHvacModeSettingHeat, nil
	case "cool":
		return ClimateSettingScheduleHvacModeSettingCool, nil
	case "heat_cool":
		return ClimateSettingScheduleHvacModeSettingHeatCool, nil
	}
	var t ClimateSettingScheduleHvacModeSetting
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClimateSettingScheduleHvacModeSetting) Ptr() *ClimateSettingScheduleHvacModeSetting {
	return &c
}

type ConnectWebview struct {
	ConnectWebviewId              string                                        `json:"connect_webview_id"`
	ConnectedAccountId            *string                                       `json:"connected_account_id,omitempty"`
	Url                           string                                        `json:"url"`
	WorkspaceId                   string                                        `json:"workspace_id"`
	DeviceSelectionMode           ConnectWebviewDeviceSelectionMode             `json:"device_selection_mode,omitempty"`
	AcceptedProviders             []string                                      `json:"accepted_providers,omitempty"`
	AcceptedDevices               []string                                      `json:"accepted_devices,omitempty"`
	AnyProviderAllowed            bool                                          `json:"any_provider_allowed"`
	AnyDeviceAllowed              bool                                          `json:"any_device_allowed"`
	CreatedAt                     time.Time                                     `json:"created_at"`
	LoginSuccessful               bool                                          `json:"login_successful"`
	Status                        ConnectWebviewStatus                          `json:"status,omitempty"`
	CustomRedirectUrl             *string                                       `json:"custom_redirect_url,omitempty"`
	CustomRedirectFailureUrl      *string                                       `json:"custom_redirect_failure_url,omitempty"`
	CustomMetadata                map[string]*ConnectWebviewCustomMetadataValue `json:"custom_metadata,omitempty"`
	AutomaticallyManageNewDevices bool                                          `json:"automatically_manage_new_devices"`
	WaitForDeviceCreation         bool                                          `json:"wait_for_device_creation"`
	AuthorizedAt                  *time.Time                                    `json:"authorized_at,omitempty"`
	SelectedProvider              *string                                       `json:"selected_provider,omitempty"`

	_rawJSON json.RawMessage
}

func (c *ConnectWebview) UnmarshalJSON(data []byte) error {
	type unmarshaler ConnectWebview
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ConnectWebview(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConnectWebview) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ConnectWebviewCustomMetadataValue struct {
	typeName string
	String   string
	Boolean  bool
}

func NewConnectWebviewCustomMetadataValueFromString(value string) *ConnectWebviewCustomMetadataValue {
	return &ConnectWebviewCustomMetadataValue{typeName: "string", String: value}
}

func NewConnectWebviewCustomMetadataValueFromBoolean(value bool) *ConnectWebviewCustomMetadataValue {
	return &ConnectWebviewCustomMetadataValue{typeName: "boolean", Boolean: value}
}

func (c *ConnectWebviewCustomMetadataValue) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	var valueBoolean bool
	if err := json.Unmarshal(data, &valueBoolean); err == nil {
		c.typeName = "boolean"
		c.Boolean = valueBoolean
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c ConnectWebviewCustomMetadataValue) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return json.Marshal(c.String)
	case "boolean":
		return json.Marshal(c.Boolean)
	}
}

type ConnectWebviewCustomMetadataValueVisitor interface {
	VisitString(string) error
	VisitBoolean(bool) error
}

func (c *ConnectWebviewCustomMetadataValue) Accept(visitor ConnectWebviewCustomMetadataValueVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return visitor.VisitString(c.String)
	case "boolean":
		return visitor.VisitBoolean(c.Boolean)
	}
}

type ConnectWebviewDeviceSelectionMode string

const (
	ConnectWebviewDeviceSelectionModeNone     ConnectWebviewDeviceSelectionMode = "none"
	ConnectWebviewDeviceSelectionModeSingle   ConnectWebviewDeviceSelectionMode = "single"
	ConnectWebviewDeviceSelectionModeMultiple ConnectWebviewDeviceSelectionMode = "multiple"
)

func NewConnectWebviewDeviceSelectionModeFromString(s string) (ConnectWebviewDeviceSelectionMode, error) {
	switch s {
	case "none":
		return ConnectWebviewDeviceSelectionModeNone, nil
	case "single":
		return ConnectWebviewDeviceSelectionModeSingle, nil
	case "multiple":
		return ConnectWebviewDeviceSelectionModeMultiple, nil
	}
	var t ConnectWebviewDeviceSelectionMode
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ConnectWebviewDeviceSelectionMode) Ptr() *ConnectWebviewDeviceSelectionMode {
	return &c
}

type ConnectWebviewStatus string

const (
	ConnectWebviewStatusPending    ConnectWebviewStatus = "pending"
	ConnectWebviewStatusFailed     ConnectWebviewStatus = "failed"
	ConnectWebviewStatusAuthorized ConnectWebviewStatus = "authorized"
)

func NewConnectWebviewStatusFromString(s string) (ConnectWebviewStatus, error) {
	switch s {
	case "pending":
		return ConnectWebviewStatusPending, nil
	case "failed":
		return ConnectWebviewStatusFailed, nil
	case "authorized":
		return ConnectWebviewStatusAuthorized, nil
	}
	var t ConnectWebviewStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ConnectWebviewStatus) Ptr() *ConnectWebviewStatus {
	return &c
}

type ConnectedAccount struct {
	ConnectedAccountId            *string                                         `json:"connected_account_id,omitempty"`
	CreatedAt                     *time.Time                                      `json:"created_at,omitempty"`
	UserIdentifier                *ConnectedAccountUserIdentifier                 `json:"user_identifier,omitempty"`
	AccountType                   *string                                         `json:"account_type,omitempty"`
	AccountTypeDisplayName        string                                          `json:"account_type_display_name"`
	Errors                        interface{}                                     `json:"errors,omitempty"`
	Warnings                      interface{}                                     `json:"warnings,omitempty"`
	CustomMetadata                map[string]*ConnectedAccountCustomMetadataValue `json:"custom_metadata,omitempty"`
	AutomaticallyManageNewDevices bool                                            `json:"automatically_manage_new_devices"`

	_rawJSON json.RawMessage
}

func (c *ConnectedAccount) UnmarshalJSON(data []byte) error {
	type unmarshaler ConnectedAccount
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ConnectedAccount(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConnectedAccount) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ConnectedAccountCustomMetadataValue struct {
	typeName string
	String   string
	Boolean  bool
}

func NewConnectedAccountCustomMetadataValueFromString(value string) *ConnectedAccountCustomMetadataValue {
	return &ConnectedAccountCustomMetadataValue{typeName: "string", String: value}
}

func NewConnectedAccountCustomMetadataValueFromBoolean(value bool) *ConnectedAccountCustomMetadataValue {
	return &ConnectedAccountCustomMetadataValue{typeName: "boolean", Boolean: value}
}

func (c *ConnectedAccountCustomMetadataValue) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	var valueBoolean bool
	if err := json.Unmarshal(data, &valueBoolean); err == nil {
		c.typeName = "boolean"
		c.Boolean = valueBoolean
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c ConnectedAccountCustomMetadataValue) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return json.Marshal(c.String)
	case "boolean":
		return json.Marshal(c.Boolean)
	}
}

type ConnectedAccountCustomMetadataValueVisitor interface {
	VisitString(string) error
	VisitBoolean(bool) error
}

func (c *ConnectedAccountCustomMetadataValue) Accept(visitor ConnectedAccountCustomMetadataValueVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return visitor.VisitString(c.String)
	case "boolean":
		return visitor.VisitBoolean(c.Boolean)
	}
}

type ConnectedAccountUserIdentifier struct {
	Username  *string `json:"username,omitempty"`
	ApiUrl    *string `json:"api_url,omitempty"`
	Email     *string `json:"email,omitempty"`
	Phone     *string `json:"phone,omitempty"`
	Exclusive *bool   `json:"exclusive,omitempty"`

	_rawJSON json.RawMessage
}

func (c *ConnectedAccountUserIdentifier) UnmarshalJSON(data []byte) error {
	type unmarshaler ConnectedAccountUserIdentifier
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ConnectedAccountUserIdentifier(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConnectedAccountUserIdentifier) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type Device struct {
	// Unique identifier for the device.
	DeviceId string `json:"device_id"`
	// Type of the device.
	DeviceType DeviceType `json:"device_type,omitempty"`
	// Collection of capabilities that the device supports when connected to Seam. Values are "access_code," which indicates that the device can manage and utilize digital PIN codes for secure access; "lock," which indicates that the device controls a door locking mechanism, enabling the remote opening and closing of doors and other entry points; "noise_detection," which indicates that the device supports monitoring and responding to ambient noise levels; "thermostat," which indicates that the device can regulate and adjust indoor temperatures; and "battery," which indicates that the device can manage battery life and health.
	CapabilitiesSupported []DeviceCapabilitiesSupportedItem `json:"capabilities_supported,omitempty"`
	// Properties of the device.
	Properties *DeviceProperties `json:"properties,omitempty"`
	// Location information for the device.
	Location *DeviceLocation `json:"location,omitempty"`
	// Unique identifier for the account associated with the device.
	ConnectedAccountId string `json:"connected_account_id"`
	// Unique identifier for the Seam workspace associated with the device.
	WorkspaceId string `json:"workspace_id"`
	// Array of errors associated with the device. Each error object within the array contains two fields: "error_code" and "message." "error_code" is a string that uniquely identifies the type of error, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the error, offering insights into the issue and potentially how to rectify it.
	Errors []*DeviceErrorsItem `json:"errors,omitempty"`
	// Array of warnings associated with the device. Each warning object within the array contains two fields: "warning_code" and "message." "warning_code" is a string that uniquely identifies the type of warning, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the warning, offering insights into the issue and potentially how to rectify it.
	Warnings []*DeviceWarningsItem `json:"warnings,omitempty"`
	// Date and time at which the device object was created.
	CreatedAt time.Time `json:"created_at"`
	// Indicates whether Seam manages the device.
	IsManaged string `json:"is_managed"`

	_rawJSON json.RawMessage
}

func (d *Device) UnmarshalJSON(data []byte) error {
	type unmarshaler Device
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = Device(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *Device) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DeviceCapabilitiesSupportedItem string

const (
	DeviceCapabilitiesSupportedItemAccessCode     DeviceCapabilitiesSupportedItem = "access_code"
	DeviceCapabilitiesSupportedItemLock           DeviceCapabilitiesSupportedItem = "lock"
	DeviceCapabilitiesSupportedItemNoiseDetection DeviceCapabilitiesSupportedItem = "noise_detection"
	DeviceCapabilitiesSupportedItemThermostat     DeviceCapabilitiesSupportedItem = "thermostat"
	DeviceCapabilitiesSupportedItemBattery        DeviceCapabilitiesSupportedItem = "battery"
	DeviceCapabilitiesSupportedItemPhone          DeviceCapabilitiesSupportedItem = "phone"
)

func NewDeviceCapabilitiesSupportedItemFromString(s string) (DeviceCapabilitiesSupportedItem, error) {
	switch s {
	case "access_code":
		return DeviceCapabilitiesSupportedItemAccessCode, nil
	case "lock":
		return DeviceCapabilitiesSupportedItemLock, nil
	case "noise_detection":
		return DeviceCapabilitiesSupportedItemNoiseDetection, nil
	case "thermostat":
		return DeviceCapabilitiesSupportedItemThermostat, nil
	case "battery":
		return DeviceCapabilitiesSupportedItemBattery, nil
	case "phone":
		return DeviceCapabilitiesSupportedItemPhone, nil
	}
	var t DeviceCapabilitiesSupportedItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DeviceCapabilitiesSupportedItem) Ptr() *DeviceCapabilitiesSupportedItem {
	return &d
}

type DeviceErrorsItem struct {
	ErrorCode string `json:"error_code"`
	Message   string `json:"message"`

	_rawJSON json.RawMessage
}

func (d *DeviceErrorsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler DeviceErrorsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeviceErrorsItem(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeviceErrorsItem) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// Location information for the device.
type DeviceLocation struct {
	// Name of the device location.
	LocationName *string `json:"location_name,omitempty"`
	// Time zone of the device location.
	Timezone *string `json:"timezone,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DeviceLocation) UnmarshalJSON(data []byte) error {
	type unmarshaler DeviceLocation
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeviceLocation(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeviceLocation) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// Properties of the device.
type DeviceProperties struct {
	AssaAbloyCredentialServiceMetadata *DevicePropertiesAssaAbloyCredentialServiceMetadata `json:"assa_abloy_credential_service_metadata,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DeviceProperties) UnmarshalJSON(data []byte) error {
	type unmarshaler DeviceProperties
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeviceProperties(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeviceProperties) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DevicePropertiesAssaAbloyCredentialServiceMetadata struct {
	HasActiveEndpoint bool                                                               `json:"has_active_endpoint"`
	Endpoints         []*DevicePropertiesAssaAbloyCredentialServiceMetadataEndpointsItem `json:"endpoints,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DevicePropertiesAssaAbloyCredentialServiceMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler DevicePropertiesAssaAbloyCredentialServiceMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DevicePropertiesAssaAbloyCredentialServiceMetadata(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DevicePropertiesAssaAbloyCredentialServiceMetadata) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DevicePropertiesAssaAbloyCredentialServiceMetadataEndpointsItem struct {
	EndpointId string `json:"endpoint_id"`
	IsActive   bool   `json:"is_active"`

	_rawJSON json.RawMessage
}

func (d *DevicePropertiesAssaAbloyCredentialServiceMetadataEndpointsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler DevicePropertiesAssaAbloyCredentialServiceMetadataEndpointsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DevicePropertiesAssaAbloyCredentialServiceMetadataEndpointsItem(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DevicePropertiesAssaAbloyCredentialServiceMetadataEndpointsItem) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DeviceProvider struct {
	DeviceProviderName string                                 `json:"device_provider_name"`
	DisplayName        string                                 `json:"display_name"`
	ImageUrl           string                                 `json:"image_url"`
	ProviderCategories []DeviceProviderProviderCategoriesItem `json:"provider_categories,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DeviceProvider) UnmarshalJSON(data []byte) error {
	type unmarshaler DeviceProvider
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeviceProvider(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeviceProvider) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DeviceProviderProviderCategoriesItem string

const (
	DeviceProviderProviderCategoriesItemStable             DeviceProviderProviderCategoriesItem = "stable"
	DeviceProviderProviderCategoriesItemConsumerSmartlocks DeviceProviderProviderCategoriesItem = "consumer_smartlocks"
)

func NewDeviceProviderProviderCategoriesItemFromString(s string) (DeviceProviderProviderCategoriesItem, error) {
	switch s {
	case "stable":
		return DeviceProviderProviderCategoriesItemStable, nil
	case "consumer_smartlocks":
		return DeviceProviderProviderCategoriesItemConsumerSmartlocks, nil
	}
	var t DeviceProviderProviderCategoriesItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DeviceProviderProviderCategoriesItem) Ptr() *DeviceProviderProviderCategoriesItem {
	return &d
}

type DeviceType string

const (
	DeviceTypeAkuvoxLock             DeviceType = "akuvox_lock"
	DeviceTypeAugustLock             DeviceType = "august_lock"
	DeviceTypeBrivoAccessPoint       DeviceType = "brivo_access_point"
	DeviceTypeButterflymxPanel       DeviceType = "butterflymx_panel"
	DeviceTypeAvigilonAltaEntry      DeviceType = "avigilon_alta_entry"
	DeviceTypeDoorkingLock           DeviceType = "doorking_lock"
	DeviceTypeGenieDoor              DeviceType = "genie_door"
	DeviceTypeIglooLock              DeviceType = "igloo_lock"
	DeviceTypeLinearLock             DeviceType = "linear_lock"
	DeviceTypeLocklyLock             DeviceType = "lockly_lock"
	DeviceTypeKwiksetLock            DeviceType = "kwikset_lock"
	DeviceTypeNukiLock               DeviceType = "nuki_lock"
	DeviceTypeSaltoLock              DeviceType = "salto_lock"
	DeviceTypeSchlageLock            DeviceType = "schlage_lock"
	DeviceTypeSeamRelay              DeviceType = "seam_relay"
	DeviceTypeSmartthingsLock        DeviceType = "smartthings_lock"
	DeviceTypeWyzeLock               DeviceType = "wyze_lock"
	DeviceTypeYaleLock               DeviceType = "yale_lock"
	DeviceTypeTwoNIntercom           DeviceType = "two_n_intercom"
	DeviceTypeControlbywebDevice     DeviceType = "controlbyweb_device"
	DeviceTypeTtlockLock             DeviceType = "ttlock_lock"
	DeviceTypeIgloohomeLock          DeviceType = "igloohome_lock"
	DeviceTypeHubitatLock            DeviceType = "hubitat_lock"
	DeviceTypeFourSuitesDoor         DeviceType = "four_suites_door"
	DeviceTypeDormakabaOracodeDoor   DeviceType = "dormakaba_oracode_door"
	DeviceTypeNoiseawareActivityZone DeviceType = "noiseaware_activity_zone"
	DeviceTypeMinutSensor            DeviceType = "minut_sensor"
	DeviceTypeEcobeeThermostat       DeviceType = "ecobee_thermostat"
	DeviceTypeNestThermostat         DeviceType = "nest_thermostat"
	DeviceTypeIosPhone               DeviceType = "ios_phone"
	DeviceTypeAndroidPhone           DeviceType = "android_phone"
)

func NewDeviceTypeFromString(s string) (DeviceType, error) {
	switch s {
	case "akuvox_lock":
		return DeviceTypeAkuvoxLock, nil
	case "august_lock":
		return DeviceTypeAugustLock, nil
	case "brivo_access_point":
		return DeviceTypeBrivoAccessPoint, nil
	case "butterflymx_panel":
		return DeviceTypeButterflymxPanel, nil
	case "avigilon_alta_entry":
		return DeviceTypeAvigilonAltaEntry, nil
	case "doorking_lock":
		return DeviceTypeDoorkingLock, nil
	case "genie_door":
		return DeviceTypeGenieDoor, nil
	case "igloo_lock":
		return DeviceTypeIglooLock, nil
	case "linear_lock":
		return DeviceTypeLinearLock, nil
	case "lockly_lock":
		return DeviceTypeLocklyLock, nil
	case "kwikset_lock":
		return DeviceTypeKwiksetLock, nil
	case "nuki_lock":
		return DeviceTypeNukiLock, nil
	case "salto_lock":
		return DeviceTypeSaltoLock, nil
	case "schlage_lock":
		return DeviceTypeSchlageLock, nil
	case "seam_relay":
		return DeviceTypeSeamRelay, nil
	case "smartthings_lock":
		return DeviceTypeSmartthingsLock, nil
	case "wyze_lock":
		return DeviceTypeWyzeLock, nil
	case "yale_lock":
		return DeviceTypeYaleLock, nil
	case "two_n_intercom":
		return DeviceTypeTwoNIntercom, nil
	case "controlbyweb_device":
		return DeviceTypeControlbywebDevice, nil
	case "ttlock_lock":
		return DeviceTypeTtlockLock, nil
	case "igloohome_lock":
		return DeviceTypeIgloohomeLock, nil
	case "hubitat_lock":
		return DeviceTypeHubitatLock, nil
	case "four_suites_door":
		return DeviceTypeFourSuitesDoor, nil
	case "dormakaba_oracode_door":
		return DeviceTypeDormakabaOracodeDoor, nil
	case "noiseaware_activity_zone":
		return DeviceTypeNoiseawareActivityZone, nil
	case "minut_sensor":
		return DeviceTypeMinutSensor, nil
	case "ecobee_thermostat":
		return DeviceTypeEcobeeThermostat, nil
	case "nest_thermostat":
		return DeviceTypeNestThermostat, nil
	case "ios_phone":
		return DeviceTypeIosPhone, nil
	case "android_phone":
		return DeviceTypeAndroidPhone, nil
	}
	var t DeviceType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DeviceType) Ptr() *DeviceType {
	return &d
}

type DeviceWarningsItem struct {
	WarningCode string `json:"warning_code"`
	Message     string `json:"message"`

	_rawJSON json.RawMessage
}

func (d *DeviceWarningsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler DeviceWarningsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeviceWarningsItem(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeviceWarningsItem) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type EnrollmentAutomation struct {
	CredentialManagerAcsSystemId string    `json:"credential_manager_acs_system_id"`
	UserIdentityId               string    `json:"user_identity_id"`
	CreatedAt                    time.Time `json:"created_at"`
	WorkspaceId                  string    `json:"workspace_id"`
	EnrollmentAutomationId       string    `json:"enrollment_automation_id"`

	_rawJSON json.RawMessage
}

func (e *EnrollmentAutomation) UnmarshalJSON(data []byte) error {
	type unmarshaler EnrollmentAutomation
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EnrollmentAutomation(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EnrollmentAutomation) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type Event struct {
	EventId     string    `json:"event_id"`
	DeviceId    *string   `json:"device_id,omitempty"`
	EventType   string    `json:"event_type"`
	WorkspaceId string    `json:"workspace_id"`
	CreatedAt   time.Time `json:"created_at"`
	OccurredAt  time.Time `json:"occurred_at"`

	_rawJSON json.RawMessage
}

func (e *Event) UnmarshalJSON(data []byte) error {
	type unmarshaler Event
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = Event(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *Event) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type Manufacturer string

const (
	ManufacturerAkuvox           Manufacturer = "akuvox"
	ManufacturerAugust           Manufacturer = "august"
	ManufacturerAvigilonAlta     Manufacturer = "avigilon_alta"
	ManufacturerBrivo            Manufacturer = "brivo"
	ManufacturerButterflymx      Manufacturer = "butterflymx"
	ManufacturerDoorking         Manufacturer = "doorking"
	ManufacturerFourSuites       Manufacturer = "four_suites"
	ManufacturerGenie            Manufacturer = "genie"
	ManufacturerIgloo            Manufacturer = "igloo"
	ManufacturerKeywe            Manufacturer = "keywe"
	ManufacturerKwikset          Manufacturer = "kwikset"
	ManufacturerLinear           Manufacturer = "linear"
	ManufacturerLockly           Manufacturer = "lockly"
	ManufacturerNuki             Manufacturer = "nuki"
	ManufacturerPhilia           Manufacturer = "philia"
	ManufacturerSalto            Manufacturer = "salto"
	ManufacturerSamsung          Manufacturer = "samsung"
	ManufacturerSchlage          Manufacturer = "schlage"
	ManufacturerSeam             Manufacturer = "seam"
	ManufacturerUnknown          Manufacturer = "unknown"
	ManufacturerWyze             Manufacturer = "wyze"
	ManufacturerYale             Manufacturer = "yale"
	ManufacturerMinut            Manufacturer = "minut"
	ManufacturerTwoN             Manufacturer = "two_n"
	ManufacturerTtlock           Manufacturer = "ttlock"
	ManufacturerNest             Manufacturer = "nest"
	ManufacturerIgloohome        Manufacturer = "igloohome"
	ManufacturerEcobee           Manufacturer = "ecobee"
	ManufacturerHubitat          Manufacturer = "hubitat"
	ManufacturerControlbyweb     Manufacturer = "controlbyweb"
	ManufacturerSmartthings      Manufacturer = "smartthings"
	ManufacturerDormakabaOracode Manufacturer = "dormakaba_oracode"
)

func NewManufacturerFromString(s string) (Manufacturer, error) {
	switch s {
	case "akuvox":
		return ManufacturerAkuvox, nil
	case "august":
		return ManufacturerAugust, nil
	case "avigilon_alta":
		return ManufacturerAvigilonAlta, nil
	case "brivo":
		return ManufacturerBrivo, nil
	case "butterflymx":
		return ManufacturerButterflymx, nil
	case "doorking":
		return ManufacturerDoorking, nil
	case "four_suites":
		return ManufacturerFourSuites, nil
	case "genie":
		return ManufacturerGenie, nil
	case "igloo":
		return ManufacturerIgloo, nil
	case "keywe":
		return ManufacturerKeywe, nil
	case "kwikset":
		return ManufacturerKwikset, nil
	case "linear":
		return ManufacturerLinear, nil
	case "lockly":
		return ManufacturerLockly, nil
	case "nuki":
		return ManufacturerNuki, nil
	case "philia":
		return ManufacturerPhilia, nil
	case "salto":
		return ManufacturerSalto, nil
	case "samsung":
		return ManufacturerSamsung, nil
	case "schlage":
		return ManufacturerSchlage, nil
	case "seam":
		return ManufacturerSeam, nil
	case "unknown":
		return ManufacturerUnknown, nil
	case "wyze":
		return ManufacturerWyze, nil
	case "yale":
		return ManufacturerYale, nil
	case "minut":
		return ManufacturerMinut, nil
	case "two_n":
		return ManufacturerTwoN, nil
	case "ttlock":
		return ManufacturerTtlock, nil
	case "nest":
		return ManufacturerNest, nil
	case "igloohome":
		return ManufacturerIgloohome, nil
	case "ecobee":
		return ManufacturerEcobee, nil
	case "hubitat":
		return ManufacturerHubitat, nil
	case "controlbyweb":
		return ManufacturerControlbyweb, nil
	case "smartthings":
		return ManufacturerSmartthings, nil
	case "dormakaba_oracode":
		return ManufacturerDormakabaOracode, nil
	}
	var t Manufacturer
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m Manufacturer) Ptr() *Manufacturer {
	return &m
}

type NoiseThreshold struct {
	NoiseThresholdId       string   `json:"noise_threshold_id"`
	DeviceId               string   `json:"device_id"`
	Name                   string   `json:"name"`
	NoiseThresholdNrs      *float64 `json:"noise_threshold_nrs,omitempty"`
	StartsDailyAt          string   `json:"starts_daily_at"`
	EndsDailyAt            string   `json:"ends_daily_at"`
	NoiseThresholdDecibels float64  `json:"noise_threshold_decibels"`

	_rawJSON json.RawMessage
}

func (n *NoiseThreshold) UnmarshalJSON(data []byte) error {
	type unmarshaler NoiseThreshold
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NoiseThreshold(value)
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NoiseThreshold) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type Phone struct {
	// Unique identifier for the device.
	DeviceId   string          `json:"device_id"`
	DeviceType PhoneDeviceType `json:"device_type,omitempty"`
	// Collection of capabilities that the device supports when connected to Seam. Values are "access_code," which indicates that the device can manage and utilize digital PIN codes for secure access; "lock," which indicates that the device controls a door locking mechanism, enabling the remote opening and closing of doors and other entry points; "noise_detection," which indicates that the device supports monitoring and responding to ambient noise levels; "thermostat," which indicates that the device can regulate and adjust indoor temperatures; and "battery," which indicates that the device can manage battery life and health.
	CapabilitiesSupported []PhoneCapabilitiesSupportedItem `json:"capabilities_supported,omitempty"`
	// Properties of the device.
	Properties *PhoneProperties `json:"properties,omitempty"`
	// Location information for the device.
	Location *PhoneLocation `json:"location,omitempty"`
	// Unique identifier for the Seam workspace associated with the device.
	WorkspaceId string `json:"workspace_id"`
	// Array of errors associated with the device. Each error object within the array contains two fields: "error_code" and "message." "error_code" is a string that uniquely identifies the type of error, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the error, offering insights into the issue and potentially how to rectify it.
	Errors []*PhoneErrorsItem `json:"errors,omitempty"`
	// Array of warnings associated with the device. Each warning object within the array contains two fields: "warning_code" and "message." "warning_code" is a string that uniquely identifies the type of warning, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the warning, offering insights into the issue and potentially how to rectify it.
	Warnings []*PhoneWarningsItem `json:"warnings,omitempty"`
	// Date and time at which the device object was created.
	CreatedAt time.Time `json:"created_at"`
	// Indicates whether Seam manages the device.
	IsManaged                          string                                   `json:"is_managed"`
	AssaAbloyCredentialServiceMetadata *PhoneAssaAbloyCredentialServiceMetadata `json:"assa_abloy_credential_service_metadata,omitempty"`

	_rawJSON json.RawMessage
}

func (p *Phone) UnmarshalJSON(data []byte) error {
	type unmarshaler Phone
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = Phone(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *Phone) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PhoneAssaAbloyCredentialServiceMetadata struct {
	HasActiveEndpoint bool                                                    `json:"has_active_endpoint"`
	Endpoints         []*PhoneAssaAbloyCredentialServiceMetadataEndpointsItem `json:"endpoints,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PhoneAssaAbloyCredentialServiceMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler PhoneAssaAbloyCredentialServiceMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PhoneAssaAbloyCredentialServiceMetadata(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PhoneAssaAbloyCredentialServiceMetadata) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PhoneAssaAbloyCredentialServiceMetadataEndpointsItem struct {
	EndpointId string `json:"endpoint_id"`
	IsActive   bool   `json:"is_active"`

	_rawJSON json.RawMessage
}

func (p *PhoneAssaAbloyCredentialServiceMetadataEndpointsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler PhoneAssaAbloyCredentialServiceMetadataEndpointsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PhoneAssaAbloyCredentialServiceMetadataEndpointsItem(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PhoneAssaAbloyCredentialServiceMetadataEndpointsItem) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PhoneCapabilitiesSupportedItem string

const (
	PhoneCapabilitiesSupportedItemAccessCode     PhoneCapabilitiesSupportedItem = "access_code"
	PhoneCapabilitiesSupportedItemLock           PhoneCapabilitiesSupportedItem = "lock"
	PhoneCapabilitiesSupportedItemNoiseDetection PhoneCapabilitiesSupportedItem = "noise_detection"
	PhoneCapabilitiesSupportedItemThermostat     PhoneCapabilitiesSupportedItem = "thermostat"
	PhoneCapabilitiesSupportedItemBattery        PhoneCapabilitiesSupportedItem = "battery"
	PhoneCapabilitiesSupportedItemPhone          PhoneCapabilitiesSupportedItem = "phone"
)

func NewPhoneCapabilitiesSupportedItemFromString(s string) (PhoneCapabilitiesSupportedItem, error) {
	switch s {
	case "access_code":
		return PhoneCapabilitiesSupportedItemAccessCode, nil
	case "lock":
		return PhoneCapabilitiesSupportedItemLock, nil
	case "noise_detection":
		return PhoneCapabilitiesSupportedItemNoiseDetection, nil
	case "thermostat":
		return PhoneCapabilitiesSupportedItemThermostat, nil
	case "battery":
		return PhoneCapabilitiesSupportedItemBattery, nil
	case "phone":
		return PhoneCapabilitiesSupportedItemPhone, nil
	}
	var t PhoneCapabilitiesSupportedItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PhoneCapabilitiesSupportedItem) Ptr() *PhoneCapabilitiesSupportedItem {
	return &p
}

type PhoneDeviceType string

const (
	PhoneDeviceTypeAndroidPhone PhoneDeviceType = "android_phone"
	PhoneDeviceTypeIosPhone     PhoneDeviceType = "ios_phone"
)

func NewPhoneDeviceTypeFromString(s string) (PhoneDeviceType, error) {
	switch s {
	case "android_phone":
		return PhoneDeviceTypeAndroidPhone, nil
	case "ios_phone":
		return PhoneDeviceTypeIosPhone, nil
	}
	var t PhoneDeviceType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PhoneDeviceType) Ptr() *PhoneDeviceType {
	return &p
}

type PhoneErrorsItem struct {
	ErrorCode string `json:"error_code"`
	Message   string `json:"message"`

	_rawJSON json.RawMessage
}

func (p *PhoneErrorsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler PhoneErrorsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PhoneErrorsItem(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PhoneErrorsItem) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// Location information for the device.
type PhoneLocation struct {
	// Name of the device location.
	LocationName *string `json:"location_name,omitempty"`
	// Time zone of the device location.
	Timezone *string `json:"timezone,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PhoneLocation) UnmarshalJSON(data []byte) error {
	type unmarshaler PhoneLocation
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PhoneLocation(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PhoneLocation) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// Properties of the device.
type PhoneProperties struct {
	AssaAbloyCredentialServiceMetadata *PhonePropertiesAssaAbloyCredentialServiceMetadata `json:"assa_abloy_credential_service_metadata,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PhoneProperties) UnmarshalJSON(data []byte) error {
	type unmarshaler PhoneProperties
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PhoneProperties(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PhoneProperties) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PhonePropertiesAssaAbloyCredentialServiceMetadata struct {
	HasActiveEndpoint bool                                                              `json:"has_active_endpoint"`
	Endpoints         []*PhonePropertiesAssaAbloyCredentialServiceMetadataEndpointsItem `json:"endpoints,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PhonePropertiesAssaAbloyCredentialServiceMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler PhonePropertiesAssaAbloyCredentialServiceMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PhonePropertiesAssaAbloyCredentialServiceMetadata(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PhonePropertiesAssaAbloyCredentialServiceMetadata) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PhonePropertiesAssaAbloyCredentialServiceMetadataEndpointsItem struct {
	EndpointId string `json:"endpoint_id"`
	IsActive   bool   `json:"is_active"`

	_rawJSON json.RawMessage
}

func (p *PhonePropertiesAssaAbloyCredentialServiceMetadataEndpointsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler PhonePropertiesAssaAbloyCredentialServiceMetadataEndpointsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PhonePropertiesAssaAbloyCredentialServiceMetadataEndpointsItem(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PhonePropertiesAssaAbloyCredentialServiceMetadataEndpointsItem) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PhoneWarningsItem struct {
	WarningCode string `json:"warning_code"`
	Message     string `json:"message"`

	_rawJSON json.RawMessage
}

func (p *PhoneWarningsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler PhoneWarningsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PhoneWarningsItem(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PhoneWarningsItem) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProviderCategory string

const (
	ProviderCategoryStable             ProviderCategory = "stable"
	ProviderCategoryConsumerSmartlocks ProviderCategory = "consumer_smartlocks"
)

func NewProviderCategoryFromString(s string) (ProviderCategory, error) {
	switch s {
	case "stable":
		return ProviderCategoryStable, nil
	case "consumer_smartlocks":
		return ProviderCategoryConsumerSmartlocks, nil
	}
	var t ProviderCategory
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p ProviderCategory) Ptr() *ProviderCategory {
	return &p
}

type ServiceHealth struct {
	Service     string              `json:"service"`
	Status      ServiceHealthStatus `json:"status,omitempty"`
	Description string              `json:"description"`

	_rawJSON json.RawMessage
}

func (s *ServiceHealth) UnmarshalJSON(data []byte) error {
	type unmarshaler ServiceHealth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = ServiceHealth(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *ServiceHealth) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type ServiceHealthStatus string

const (
	ServiceHealthStatusHealthy  ServiceHealthStatus = "healthy"
	ServiceHealthStatusDegraded ServiceHealthStatus = "degraded"
	ServiceHealthStatusDown     ServiceHealthStatus = "down"
)

func NewServiceHealthStatusFromString(s string) (ServiceHealthStatus, error) {
	switch s {
	case "healthy":
		return ServiceHealthStatusHealthy, nil
	case "degraded":
		return ServiceHealthStatusDegraded, nil
	case "down":
		return ServiceHealthStatusDown, nil
	}
	var t ServiceHealthStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s ServiceHealthStatus) Ptr() *ServiceHealthStatus {
	return &s
}

type UnmanagedAccessCode struct {
	// Nature of the access code. Values are "ongoing" for access codes that are active continuously until deactivated manually or "time_bound" for access codes that have a specific duration.
	Type UnmanagedAccessCodeType `json:"type,omitempty"`
	// Unique identifier for the access code.
	AccessCodeId string `json:"access_code_id"`
	// Unique identifier for the device associated with the access code.
	DeviceId string `json:"device_id"`
	// Name of the access code. Enables administrators and users to identify the access code easily, especially when there are numerous access codes.
	Name *string `json:"name,omitempty"`
	// Code used for access. Typically, a numeric or alphanumeric string.
	Code *string `json:"code,omitempty"`
	// Date and time at which the access code was created.
	CreatedAt time.Time   `json:"created_at"`
	Errors    interface{} `json:"errors,omitempty"`
	Warnings  interface{} `json:"warnings,omitempty"`
	IsManaged string      `json:"is_managed"`
	// Date and time at which the time-bound access code becomes active.
	StartsAt *time.Time `json:"starts_at,omitempty"`
	// Date and time after which the time-bound access code becomes inactive.
	EndsAt *time.Time `json:"ends_at,omitempty"`
	status string

	_rawJSON json.RawMessage
}

func (u *UnmanagedAccessCode) Status() string {
	return u.status
}

func (u *UnmanagedAccessCode) UnmarshalJSON(data []byte) error {
	type unmarshaler UnmanagedAccessCode
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UnmanagedAccessCode(value)
	u.status = "set"
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UnmanagedAccessCode) MarshalJSON() ([]byte, error) {
	type embed UnmanagedAccessCode
	var marshaler = struct {
		embed
		Status string `json:"status"`
	}{
		embed:  embed(*u),
		Status: "set",
	}
	return json.Marshal(marshaler)
}

func (u *UnmanagedAccessCode) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

// Nature of the access code. Values are "ongoing" for access codes that are active continuously until deactivated manually or "time_bound" for access codes that have a specific duration.
type UnmanagedAccessCodeType string

const (
	UnmanagedAccessCodeTypeTimeBound UnmanagedAccessCodeType = "time_bound"
	UnmanagedAccessCodeTypeOngoing   UnmanagedAccessCodeType = "ongoing"
)

func NewUnmanagedAccessCodeTypeFromString(s string) (UnmanagedAccessCodeType, error) {
	switch s {
	case "time_bound":
		return UnmanagedAccessCodeTypeTimeBound, nil
	case "ongoing":
		return UnmanagedAccessCodeTypeOngoing, nil
	}
	var t UnmanagedAccessCodeType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UnmanagedAccessCodeType) Ptr() *UnmanagedAccessCodeType {
	return &u
}

type UnmanagedDevice struct {
	// Unique identifier for the device.
	DeviceId string `json:"device_id"`
	// Type of the device.
	DeviceType DeviceType `json:"device_type,omitempty"`
	// Unique identifier for the account associated with the device.
	ConnectedAccountId string `json:"connected_account_id"`
	// Collection of capabilities that the device supports when connected to Seam. Values are "access_code," which indicates that the device can manage and utilize digital PIN codes for secure access; "lock," which indicates that the device controls a door locking mechanism, enabling the remote opening and closing of doors and other entry points; "noise_detection," which indicates that the device supports monitoring and responding to ambient noise levels; "thermostat," which indicates that the device can regulate and adjust indoor temperatures; and "battery," which indicates that the device can manage battery life and health.
	CapabilitiesSupported []UnmanagedDeviceCapabilitiesSupportedItem `json:"capabilities_supported,omitempty"`
	// Unique identifier for the Seam workspace associated with the device.
	WorkspaceId string `json:"workspace_id"`
	// Array of errors associated with the device. Each error object within the array contains two fields: "error_code" and "message." "error_code" is a string that uniquely identifies the type of error, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the error, offering insights into the issue and potentially how to rectify it.
	Errors []*UnmanagedDeviceErrorsItem `json:"errors,omitempty"`
	// Array of warnings associated with the device. Each warning object within the array contains two fields: "warning_code" and "message." "warning_code" is a string that uniquely identifies the type of warning, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the warning, offering insights into the issue and potentially how to rectify it.
	Warnings []*UnmanagedDeviceWarningsItem `json:"warnings,omitempty"`
	// Date and time at which the device object was created.
	CreatedAt      time.Time                      `json:"created_at"`
	IsManaged      string                         `json:"is_managed"`
	Properties     *UnmanagedDeviceProperties     `json:"properties,omitempty"`
	DeviceProvider *UnmanagedDeviceDeviceProvider `json:"device_provider,omitempty"`

	_rawJSON json.RawMessage
}

func (u *UnmanagedDevice) UnmarshalJSON(data []byte) error {
	type unmarshaler UnmanagedDevice
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UnmanagedDevice(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UnmanagedDevice) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UnmanagedDeviceCapabilitiesSupportedItem string

const (
	UnmanagedDeviceCapabilitiesSupportedItemAccessCode     UnmanagedDeviceCapabilitiesSupportedItem = "access_code"
	UnmanagedDeviceCapabilitiesSupportedItemLock           UnmanagedDeviceCapabilitiesSupportedItem = "lock"
	UnmanagedDeviceCapabilitiesSupportedItemNoiseDetection UnmanagedDeviceCapabilitiesSupportedItem = "noise_detection"
	UnmanagedDeviceCapabilitiesSupportedItemThermostat     UnmanagedDeviceCapabilitiesSupportedItem = "thermostat"
	UnmanagedDeviceCapabilitiesSupportedItemBattery        UnmanagedDeviceCapabilitiesSupportedItem = "battery"
	UnmanagedDeviceCapabilitiesSupportedItemPhone          UnmanagedDeviceCapabilitiesSupportedItem = "phone"
)

func NewUnmanagedDeviceCapabilitiesSupportedItemFromString(s string) (UnmanagedDeviceCapabilitiesSupportedItem, error) {
	switch s {
	case "access_code":
		return UnmanagedDeviceCapabilitiesSupportedItemAccessCode, nil
	case "lock":
		return UnmanagedDeviceCapabilitiesSupportedItemLock, nil
	case "noise_detection":
		return UnmanagedDeviceCapabilitiesSupportedItemNoiseDetection, nil
	case "thermostat":
		return UnmanagedDeviceCapabilitiesSupportedItemThermostat, nil
	case "battery":
		return UnmanagedDeviceCapabilitiesSupportedItemBattery, nil
	case "phone":
		return UnmanagedDeviceCapabilitiesSupportedItemPhone, nil
	}
	var t UnmanagedDeviceCapabilitiesSupportedItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UnmanagedDeviceCapabilitiesSupportedItem) Ptr() *UnmanagedDeviceCapabilitiesSupportedItem {
	return &u
}

type UnmanagedDeviceDeviceProvider struct {
	ProviderCategories interface{} `json:"provider_categories,omitempty"`

	_rawJSON json.RawMessage
}

func (u *UnmanagedDeviceDeviceProvider) UnmarshalJSON(data []byte) error {
	type unmarshaler UnmanagedDeviceDeviceProvider
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UnmanagedDeviceDeviceProvider(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UnmanagedDeviceDeviceProvider) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UnmanagedDeviceErrorsItem struct {
	ErrorCode string `json:"error_code"`
	Message   string `json:"message"`

	_rawJSON json.RawMessage
}

func (u *UnmanagedDeviceErrorsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler UnmanagedDeviceErrorsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UnmanagedDeviceErrorsItem(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UnmanagedDeviceErrorsItem) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UnmanagedDeviceProperties struct {
	// Name of the device. Enables administrators and users to identify the device easily, especially when there are numerous devices.
	Name string `json:"name"`
	// Indicates whether the device is online.
	Online bool `json:"online"`
	// Manufacturer of the device.
	Manufacturer *string `json:"manufacturer,omitempty"`
	// Image URL for the device.
	ImageUrl *string `json:"image_url,omitempty"`
	// Alt text for the device image.
	ImageAltText *string `json:"image_alt_text,omitempty"`
	// Indicates the battery level of the device as a decimal value between 0 and 1, inclusive.
	BatteryLevel *float64 `json:"battery_level,omitempty"`
	// Represents the current status of the battery charge level. Values are "critical," which indicates an extremely low level, suggesting imminent shutdown or an urgent need for charging; "low," which signifies that the battery is under the preferred threshold and should be charged soon; "good," which denotes a satisfactory charge level, adequate for normal use without the immediate need for recharging; and "full," which represents a battery that is fully charged, providing the maximum duration of usage.
	Battery *UnmanagedDevicePropertiesBattery `json:"battery,omitempty"`
	// Indicates whether it is currently possible to use online access codes for the device.
	OnlineAccessCodesEnabled *bool `json:"online_access_codes_enabled,omitempty"`
	// Indicates whether it is currently possible to use offline access codes for the device.
	OfflineAccessCodesEnabled *bool                           `json:"offline_access_codes_enabled,omitempty"`
	Model                     *UnmanagedDevicePropertiesModel `json:"model,omitempty"`

	_rawJSON json.RawMessage
}

func (u *UnmanagedDeviceProperties) UnmarshalJSON(data []byte) error {
	type unmarshaler UnmanagedDeviceProperties
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UnmanagedDeviceProperties(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UnmanagedDeviceProperties) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

// Represents the current status of the battery charge level. Values are "critical," which indicates an extremely low level, suggesting imminent shutdown or an urgent need for charging; "low," which signifies that the battery is under the preferred threshold and should be charged soon; "good," which denotes a satisfactory charge level, adequate for normal use without the immediate need for recharging; and "full," which represents a battery that is fully charged, providing the maximum duration of usage.
type UnmanagedDevicePropertiesBattery struct {
	Level  float64                                `json:"level"`
	Status UnmanagedDevicePropertiesBatteryStatus `json:"status,omitempty"`

	_rawJSON json.RawMessage
}

func (u *UnmanagedDevicePropertiesBattery) UnmarshalJSON(data []byte) error {
	type unmarshaler UnmanagedDevicePropertiesBattery
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UnmanagedDevicePropertiesBattery(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UnmanagedDevicePropertiesBattery) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UnmanagedDevicePropertiesBatteryStatus string

const (
	UnmanagedDevicePropertiesBatteryStatusCritical UnmanagedDevicePropertiesBatteryStatus = "critical"
	UnmanagedDevicePropertiesBatteryStatusLow      UnmanagedDevicePropertiesBatteryStatus = "low"
	UnmanagedDevicePropertiesBatteryStatusGood     UnmanagedDevicePropertiesBatteryStatus = "good"
	UnmanagedDevicePropertiesBatteryStatusFull     UnmanagedDevicePropertiesBatteryStatus = "full"
)

func NewUnmanagedDevicePropertiesBatteryStatusFromString(s string) (UnmanagedDevicePropertiesBatteryStatus, error) {
	switch s {
	case "critical":
		return UnmanagedDevicePropertiesBatteryStatusCritical, nil
	case "low":
		return UnmanagedDevicePropertiesBatteryStatusLow, nil
	case "good":
		return UnmanagedDevicePropertiesBatteryStatusGood, nil
	case "full":
		return UnmanagedDevicePropertiesBatteryStatusFull, nil
	}
	var t UnmanagedDevicePropertiesBatteryStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UnmanagedDevicePropertiesBatteryStatus) Ptr() *UnmanagedDevicePropertiesBatteryStatus {
	return &u
}

type UnmanagedDevicePropertiesModel struct {
	// Display name of the device model.
	DisplayName string `json:"display_name"`
	// Display name that corresponds to the manufacturer-specific terminology for the device.
	ManufacturerDisplayName string `json:"manufacturer_display_name"`
	// Indicates whether the device supports offline access codes.
	OfflineAccessCodesSupported *bool `json:"offline_access_codes_supported,omitempty"`
	// Indicates whether the device supports online access codes.
	OnlineAccessCodesSupported *bool `json:"online_access_codes_supported,omitempty"`
	// Indicates whether the device supports an accessory keypad.
	AccessoryKeypadSupported *bool `json:"accessory_keypad_supported,omitempty"`

	_rawJSON json.RawMessage
}

func (u *UnmanagedDevicePropertiesModel) UnmarshalJSON(data []byte) error {
	type unmarshaler UnmanagedDevicePropertiesModel
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UnmanagedDevicePropertiesModel(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UnmanagedDevicePropertiesModel) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UnmanagedDeviceWarningsItem struct {
	WarningCode string `json:"warning_code"`
	Message     string `json:"message"`

	_rawJSON json.RawMessage
}

func (u *UnmanagedDeviceWarningsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler UnmanagedDeviceWarningsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UnmanagedDeviceWarningsItem(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UnmanagedDeviceWarningsItem) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type Webhook struct {
	WebhookId  string   `json:"webhook_id"`
	Url        string   `json:"url"`
	EventTypes []string `json:"event_types,omitempty"`
	Secret     *string  `json:"secret,omitempty"`

	_rawJSON json.RawMessage
}

func (w *Webhook) UnmarshalJSON(data []byte) error {
	type unmarshaler Webhook
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = Webhook(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *Webhook) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type Workspace struct {
	WorkspaceId        string  `json:"workspace_id"`
	Name               string  `json:"name"`
	IsSandbox          bool    `json:"is_sandbox"`
	ConnectPartnerName *string `json:"connect_partner_name,omitempty"`

	_rawJSON json.RawMessage
}

func (w *Workspace) UnmarshalJSON(data []byte) error {
	type unmarshaler Workspace
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = Workspace(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *Workspace) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type ConnectedAccountsGetRequestConnectedAccountId struct {
	ConnectedAccountId string `json:"connected_account_id"`

	_rawJSON json.RawMessage
}

func (c *ConnectedAccountsGetRequestConnectedAccountId) UnmarshalJSON(data []byte) error {
	type unmarshaler ConnectedAccountsGetRequestConnectedAccountId
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ConnectedAccountsGetRequestConnectedAccountId(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConnectedAccountsGetRequestConnectedAccountId) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ConnectedAccountsGetRequestEmail struct {
	Email string `json:"email"`

	_rawJSON json.RawMessage
}

func (c *ConnectedAccountsGetRequestEmail) UnmarshalJSON(data []byte) error {
	type unmarshaler ConnectedAccountsGetRequestEmail
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ConnectedAccountsGetRequestEmail(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConnectedAccountsGetRequestEmail) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type NetworksGetResponseNetwork struct {
	NetworkId   string    `json:"network_id"`
	WorkspaceId string    `json:"workspace_id"`
	DisplayName string    `json:"display_name"`
	CreatedAt   time.Time `json:"created_at"`

	_rawJSON json.RawMessage
}

func (n *NetworksGetResponseNetwork) UnmarshalJSON(data []byte) error {
	type unmarshaler NetworksGetResponseNetwork
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NetworksGetResponseNetwork(value)
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NetworksGetResponseNetwork) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NetworksListResponseNetworksItem struct {
	NetworkId   string    `json:"network_id"`
	WorkspaceId string    `json:"workspace_id"`
	DisplayName string    `json:"display_name"`
	CreatedAt   time.Time `json:"created_at"`

	_rawJSON json.RawMessage
}

func (n *NetworksListResponseNetworksItem) UnmarshalJSON(data []byte) error {
	type unmarshaler NetworksListResponseNetworksItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NetworksListResponseNetworksItem(value)
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NetworksListResponseNetworksItem) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type ThermostatsUpdateRequestDefaultClimateSettingHvacModeSetting string

const (
	ThermostatsUpdateRequestDefaultClimateSettingHvacModeSettingOff      ThermostatsUpdateRequestDefaultClimateSettingHvacModeSetting = "off"
	ThermostatsUpdateRequestDefaultClimateSettingHvacModeSettingHeat     ThermostatsUpdateRequestDefaultClimateSettingHvacModeSetting = "heat"
	ThermostatsUpdateRequestDefaultClimateSettingHvacModeSettingCool     ThermostatsUpdateRequestDefaultClimateSettingHvacModeSetting = "cool"
	ThermostatsUpdateRequestDefaultClimateSettingHvacModeSettingHeatCool ThermostatsUpdateRequestDefaultClimateSettingHvacModeSetting = "heat_cool"
)

func NewThermostatsUpdateRequestDefaultClimateSettingHvacModeSettingFromString(s string) (ThermostatsUpdateRequestDefaultClimateSettingHvacModeSetting, error) {
	switch s {
	case "off":
		return ThermostatsUpdateRequestDefaultClimateSettingHvacModeSettingOff, nil
	case "heat":
		return ThermostatsUpdateRequestDefaultClimateSettingHvacModeSettingHeat, nil
	case "cool":
		return ThermostatsUpdateRequestDefaultClimateSettingHvacModeSettingCool, nil
	case "heat_cool":
		return ThermostatsUpdateRequestDefaultClimateSettingHvacModeSettingHeatCool, nil
	}
	var t ThermostatsUpdateRequestDefaultClimateSettingHvacModeSetting
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t ThermostatsUpdateRequestDefaultClimateSettingHvacModeSetting) Ptr() *ThermostatsUpdateRequestDefaultClimateSettingHvacModeSetting {
	return &t
}

type UserIdentitiesCreateResponseUserIdentity struct {
	UserIdentityId  string    `json:"user_identity_id"`
	UserIdentityKey *string   `json:"user_identity_key,omitempty"`
	EmailAddress    *string   `json:"email_address,omitempty"`
	PhoneNumber     *string   `json:"phone_number,omitempty"`
	DisplayName     string    `json:"display_name"`
	FullName        *string   `json:"full_name,omitempty"`
	CreatedAt       time.Time `json:"created_at"`
	WorkspaceId     string    `json:"workspace_id"`

	_rawJSON json.RawMessage
}

func (u *UserIdentitiesCreateResponseUserIdentity) UnmarshalJSON(data []byte) error {
	type unmarshaler UserIdentitiesCreateResponseUserIdentity
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UserIdentitiesCreateResponseUserIdentity(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UserIdentitiesCreateResponseUserIdentity) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UserIdentitiesGetRequestUserIdentityId struct {
	UserIdentityId string `json:"user_identity_id"`

	_rawJSON json.RawMessage
}

func (u *UserIdentitiesGetRequestUserIdentityId) UnmarshalJSON(data []byte) error {
	type unmarshaler UserIdentitiesGetRequestUserIdentityId
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UserIdentitiesGetRequestUserIdentityId(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UserIdentitiesGetRequestUserIdentityId) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UserIdentitiesGetRequestUserIdentityKey struct {
	UserIdentityKey string `json:"user_identity_key"`

	_rawJSON json.RawMessage
}

func (u *UserIdentitiesGetRequestUserIdentityKey) UnmarshalJSON(data []byte) error {
	type unmarshaler UserIdentitiesGetRequestUserIdentityKey
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UserIdentitiesGetRequestUserIdentityKey(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UserIdentitiesGetRequestUserIdentityKey) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UserIdentitiesGetResponseUserIdentity struct {
	UserIdentityId  string    `json:"user_identity_id"`
	UserIdentityKey *string   `json:"user_identity_key,omitempty"`
	EmailAddress    *string   `json:"email_address,omitempty"`
	PhoneNumber     *string   `json:"phone_number,omitempty"`
	DisplayName     string    `json:"display_name"`
	FullName        *string   `json:"full_name,omitempty"`
	CreatedAt       time.Time `json:"created_at"`
	WorkspaceId     string    `json:"workspace_id"`

	_rawJSON json.RawMessage
}

func (u *UserIdentitiesGetResponseUserIdentity) UnmarshalJSON(data []byte) error {
	type unmarshaler UserIdentitiesGetResponseUserIdentity
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UserIdentitiesGetResponseUserIdentity(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UserIdentitiesGetResponseUserIdentity) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UserIdentitiesListResponseUserIdentitiesItem struct {
	UserIdentityId  string    `json:"user_identity_id"`
	UserIdentityKey *string   `json:"user_identity_key,omitempty"`
	EmailAddress    *string   `json:"email_address,omitempty"`
	PhoneNumber     *string   `json:"phone_number,omitempty"`
	DisplayName     string    `json:"display_name"`
	FullName        *string   `json:"full_name,omitempty"`
	CreatedAt       time.Time `json:"created_at"`
	WorkspaceId     string    `json:"workspace_id"`

	_rawJSON json.RawMessage
}

func (u *UserIdentitiesListResponseUserIdentitiesItem) UnmarshalJSON(data []byte) error {
	type unmarshaler UserIdentitiesListResponseUserIdentitiesItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UserIdentitiesListResponseUserIdentitiesItem(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UserIdentitiesListResponseUserIdentitiesItem) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}
